package randoop;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test501");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("L3dvSw0K");
        String str2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L3dvSw0K" + "'", str2, "L3dvSw0K");
    }

    @Test
    public void test502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test502");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        long long9 = base64_2.getEncodedLength(byteArray4);
        boolean boolean10 = base64_2.isUrlSafe();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64(10, byteArray18);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false);
        boolean boolean27 = base64_19.isInAlphabet(byteArray25, true);
        byte[] byteArray29 = base64_19.decode("/woK");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, false);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isBase64(byteArray32);
        byte[] byteArray34 = base64_2.decode(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64(1, byteArray34, false);
        boolean boolean37 = base64_36.isStrictDecoding();
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray45);
        String str47 = base64_39.encodeToString(byteArray46);
        String str48 = base64_38.encodeAsString(byteArray46);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64(10, byteArray57);
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false);
        boolean boolean66 = base64_58.isInAlphabet(byteArray64, true);
        byte[] byteArray68 = base64_58.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((-1), byteArray68);
        long long70 = base64_38.getEncodedLength(byteArray68);
        Object obj71 = base64_36.decode((Object) byteArray68);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64(64, byteArray68);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/woK" + "'", str47, "/woK");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "/woK" + "'", str48, "/woK");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[13, 10]");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 4L + "'", long70 == 4L);
        org.junit.Assert.assertNotNull(obj71);
    }

    @Test
    public void test503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test503");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, true);
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "L3dvSw" + "'", str21, "L3dvSw");
    }

    @Test
    public void test504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test504");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder8.setUrlSafe(false);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        org.apache.commons.codec.binary.Base64.Builder builder13 = builder10.setLineSeparator(byteArray12);
        org.apache.commons.codec.binary.Base64.Builder builder15 = builder10.setPadding((byte) -1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test505");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_7 = builder2.get();
        org.apache.commons.codec.binary.Base64.Builder builder8 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy9 = null;
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder8.setDecodingPolicy(codecPolicy9);
        org.apache.commons.codec.binary.Base64.Builder builder12 = builder10.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy13 = null;
        org.apache.commons.codec.binary.Base64.Builder builder14 = builder10.setDecodingPolicy(codecPolicy13);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        org.apache.commons.codec.binary.Base64.Builder builder22 = builder14.setEncodeTable(byteArray20);
        long long23 = base64_7.getEncodedLength(byteArray20);
        org.apache.commons.codec.binary.Base64.Builder builder24 = org.apache.commons.codec.binary.Base64.builder();
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder31 = builder24.setLineSeparator(byteArray30);
        org.apache.commons.codec.binary.Base64.Builder builder32 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy33 = null;
        org.apache.commons.codec.binary.Base64.Builder builder34 = builder32.setDecodingPolicy(codecPolicy33);
        org.apache.commons.codec.binary.Base64.Builder builder36 = builder34.setPadding((byte) 1);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64(10, byteArray44);
        byte[] byteArray46 = null;
        byte[] byteArray49 = base64_45.encode(byteArray46, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray56);
        String str58 = base64_50.encodeToString(byteArray57);
        byte[] byteArray59 = base64_45.encode(byteArray57);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray59);
        org.apache.commons.codec.binary.Base64.Builder builder61 = builder36.setLineSeparator(byteArray60);
        org.apache.commons.codec.binary.Base64.Builder builder62 = builder24.setEncodeTable(byteArray60);
        byte[] byteArray63 = base64_7.encode(byteArray60);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray63);
        java.math.BigInteger bigInteger65 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 8L + "'", long23 == 8L);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "/woK" + "'", str58, "/woK");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(bigInteger65);
    }

    @Test
    public void test506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test506");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_7 = builder2.get();
        byte[] byteArray9 = base64_7.decode("L3dvSw==");
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray9);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, true, 64);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "L3dvSw" + "'", str11, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[76, 51, 100, 118, 83, 119]");
    }

    @Test
    public void test507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test507");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder2.setPadding((byte) 1);
        org.apache.commons.codec.binary.Base64.Builder builder12 = builder10.setUrlSafe(true);
        org.apache.commons.codec.binary.Base64.Builder builder13 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy14 = null;
        org.apache.commons.codec.binary.Base64.Builder builder15 = builder13.setDecodingPolicy(codecPolicy14);
        org.apache.commons.codec.binary.Base64.Builder builder17 = builder15.setLineLength(0);
        org.apache.commons.codec.binary.Base64.Builder builder19 = builder15.setPadding((byte) 100);
        org.apache.commons.codec.binary.Base64.Builder builder21 = builder19.setUrlSafe(true);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray40 = base64_30.decode("DQo");
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64(10, byteArray48);
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false);
        boolean boolean57 = base64_49.isInAlphabet(byteArray55, true);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, false, true);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray55);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, true, false);
        java.math.BigInteger bigInteger65 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray64);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray64, false, true);
        byte[] byteArray69 = base64_30.encode(byteArray64);
        org.apache.commons.codec.binary.Base64.Builder builder70 = builder21.setLineSeparator(byteArray69);
        String str71 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray69);
        org.apache.commons.codec.binary.Base64.Builder builder72 = builder12.setEncodeTable(byteArray69);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[84, 68, 78, 107, 100, 108, 78, 51, 1, 10, 10, -1, -1, 10, 80, 84, 48, 78, 67, 103, 61, 61, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "VEROa2RsTjMBCgr//wpQVDBOQ2c9PQEKCv//Cg==" + "'", str71, "VEROa2RsTjMBCgr//wpQVDBOQ2c9PQEKCv//Cg==");
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test508");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray18);
        String str20 = base64_12.encodeToString(byteArray19);
        String str21 = base64_11.encodeAsString(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        String str24 = base64_11.encodeToString(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray29 = base64_11.encode(byteArray26, 1, 0);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray38);
        String str40 = base64_32.encodeToString(byteArray39);
        String str41 = base64_31.encodeAsString(byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        String str44 = base64_31.encodeToString(byteArray42);
        boolean boolean45 = base64_31.isStrictDecoding();
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray50 = base64_31.encode(byteArray47, (int) 'a', (int) (byte) 100);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = base64_31.getCodecPolicy();
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray26, true, codecPolicy51);
        org.apache.commons.codec.binary.Base64.Builder builder53 = builder9.setDecodingPolicy(codecPolicy51);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray59 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray61);
        String str63 = base64_55.encodeToString(byteArray62);
        String str64 = base64_54.encodeAsString(byteArray62);
        byte[] byteArray65 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray65);
        String str67 = base64_54.encodeToString(byteArray65);
        boolean boolean68 = base64_54.isStrictDecoding();
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray73 = base64_54.encode(byteArray70, (int) 'a', (int) (byte) 100);
        org.apache.commons.codec.binary.Base64.Builder builder74 = builder53.setEncodeTable(byteArray70);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/woK" + "'", str20, "/woK");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DQo" + "'", str23, "DQo");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DQo=" + "'", str24, "DQo=");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "/woK" + "'", str40, "/woK");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "/woK" + "'", str41, "/woK");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DQo" + "'", str43, "DQo");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DQo=" + "'", str44, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + codecPolicy51 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy51.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "/woK" + "'", str63, "/woK");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "/woK" + "'", str64, "/woK");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "DQo" + "'", str66, "DQo");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DQo=" + "'", str67, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test509");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setLineLength(0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(10, byteArray12);
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false);
        boolean boolean21 = base64_13.isInAlphabet(byteArray19, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, true);
        boolean boolean25 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isBase64(byteArray19);
        org.apache.commons.codec.binary.Base64.Builder builder27 = builder2.setEncodeTable(byteArray19);
        org.apache.commons.codec.binary.Base64.Builder builder29 = builder27.setUrlSafe(false);
        Class<?> wildcardClass30 = builder29.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test510");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, false);
        boolean boolean22 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray21);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test511");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray20 = base64_9.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray28);
        String str30 = base64_22.encodeToString(byteArray29);
        String str31 = base64_21.encodeAsString(byteArray29);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(10, byteArray39);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false);
        boolean boolean48 = base64_40.isInAlphabet(byteArray46, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, true);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray46);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, true, false);
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray55);
        byte[] byteArray57 = base64_21.encode(byteArray55);
        Object obj58 = base64_9.encode((Object) byteArray57);
        java.math.BigInteger bigInteger59 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray57);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger59);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray60);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray61, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [VEROa2RsTjNQVDBOQ2c9PQ==??]");
        } catch (IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/woK" + "'", str31, "/woK");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[86, 69, 82, 79, 97, 50, 82, 115, 84, 106, 78, 81, 86, 68, 66, 79, 81, 50, 99, 57, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test512");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray12);
        org.apache.commons.codec.binary.Base64.Builder builder14 = builder6.setEncodeTable(byteArray12);
        org.apache.commons.codec.binary.Base64.Builder builder16 = builder14.setLineLength((int) (byte) 100);
        org.apache.commons.codec.binary.Base64.Builder builder18 = builder14.setLineLength((int) (byte) 0);
        org.apache.commons.codec.binary.Base64.Builder builder20 = builder18.setUrlSafe(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test513");
        byte[] byteArray1 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray1);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = base64_6.getCodecPolicy();
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(0, byteArray1, false, codecPolicy7);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(10, byteArray17);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false);
        boolean boolean26 = base64_18.isInAlphabet(byteArray24, true);
        byte[] byteArray28 = base64_18.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((-1), byteArray28);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray37);
        String str39 = base64_31.encodeToString(byteArray38);
        String str40 = base64_30.encodeAsString(byteArray38);
        byte[] byteArray41 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        String str43 = base64_30.encodeToString(byteArray41);
        byte[] byteArray46 = base64_29.encode(byteArray41, (int) (short) 100, 0);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        boolean boolean50 = base64_8.isInAlphabet(byteArray48, false);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DQo" + "'", str2, "DQo");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + codecPolicy7 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy7.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "/woK" + "'", str39, "/woK");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "/woK" + "'", str40, "/woK");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DQo" + "'", str42, "DQo");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DQo=" + "'", str43, "DQo=");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test514");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        String str29 = base64_21.encodeToString(byteArray28);
        String str30 = base64_20.encodeAsString(byteArray28);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray38);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false);
        boolean boolean47 = base64_39.isInAlphabet(byteArray45, true);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray45);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, false);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = base64_20.encode(byteArray54);
        Object obj57 = base64_8.encode((Object) byteArray56);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray63);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63);
        String str66 = base64_8.encodeAsString(byteArray63);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64(10, byteArray74);
        byte[] byteArray79 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray79, false);
        boolean boolean83 = base64_75.isInAlphabet(byteArray81, true);
        byte[] byteArray85 = base64_75.decode("/woK");
        byte[] byteArray86 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str87 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray86);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray86);
        boolean boolean90 = base64_75.isInAlphabet(byteArray88, true);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray88, false, false, (int) ' ');
        java.math.BigInteger bigInteger95 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray88);
        boolean boolean97 = base64_8.isInAlphabet(byteArray88, true);
        byte[] byteArray99 = base64_8.decode("TDNkdlN3\r\n");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/woK" + "'", str29, "/woK");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str66, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "DQo" + "'", str87, "DQo");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertNotNull(bigInteger95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(byteArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray99), "[76, 51, 100, 118, 83, 119]");
    }

    @Test
    public void test515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test515");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, true, true, (int) '#');
        long long21 = base64_14.getEncodedLength(byteArray16);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true, false);
        byte[] byteArray42 = base64_14.encode(byteArray36);
        String str43 = base64_8.encodeToString(byteArray42);
        org.apache.commons.codec.binary.Base64.Builder builder44 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy45 = null;
        org.apache.commons.codec.binary.Base64.Builder builder46 = builder44.setDecodingPolicy(codecPolicy45);
        org.apache.commons.codec.binary.Base64.Builder builder48 = builder46.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy49 = null;
        org.apache.commons.codec.binary.Base64.Builder builder50 = builder46.setDecodingPolicy(codecPolicy49);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = null;
        org.apache.commons.codec.binary.Base64.Builder builder52 = builder46.setDecodingPolicy(codecPolicy51);
        org.apache.commons.codec.binary.Base64.Builder builder54 = builder52.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray62);
        String str64 = base64_56.encodeToString(byteArray63);
        String str65 = base64_55.encodeAsString(byteArray63);
        byte[] byteArray66 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray68 = base64_55.decode(byteArray66);
        org.apache.commons.codec.binary.Base64.Builder builder69 = builder52.setEncodeTable(byteArray66);
        boolean boolean71 = base64_8.isInAlphabet(byteArray66, false);
        boolean boolean72 = base64_8.isUrlSafe();
        org.apache.commons.codec.CodecPolicy codecPolicy73 = base64_8.getCodecPolicy();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_82 = new org.apache.commons.codec.binary.Base64(10, byteArray81);
        byte[] byteArray86 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86, false);
        boolean boolean90 = base64_82.isInAlphabet(byteArray88, true);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray88, true);
        boolean boolean93 = org.apache.commons.codec.binary.Base64.isBase64(byteArray88);
        String str94 = base64_8.encodeToString(byteArray88);
        byte[] byteArray96 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray88, true);
        byte[] byteArray97 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray96);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str43, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "/woK" + "'", str64, "/woK");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "/woK" + "'", str65, "/woK");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy73 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy73.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str94, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
    }

    @Test
    public void test516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test516");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder6.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder6.setLineLength(0);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, true, true, (int) '#');
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.apache.commons.codec.binary.Base64.Builder builder19 = builder10.setEncodeTable(byteArray18);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[82, 70, 70, 118, 68, 81, 111]");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test517");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '#');
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false);
        boolean boolean18 = base64_10.isInAlphabet(byteArray16, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray21 = base64_10.decode(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20);
        byte[] byteArray23 = base64_1.decode(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            Object obj25 = base64_1.decode((Object) 1L);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
    }

    @Test
    public void test518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test518");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        boolean boolean8 = base64_0.isUrlSafe();
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) '#');
        byte[] byteArray15 = base64_0.encode(byteArray14);
        org.apache.commons.codec.CodecPolicy codecPolicy16 = base64_0.getCodecPolicy();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertTrue("'" + codecPolicy16 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy16.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test519");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean12 = base64_0.isInAlphabet("AQoK//8K");
        byte[] byteArray13 = null;
        String str14 = base64_0.encodeToString(byteArray13);
        boolean boolean16 = base64_0.isInAlphabet("TDNkdlN3\r\n");
        byte[] byteArray18 = base64_0.decode("AAoKCgoB");
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        String str26 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray25);
        byte[] byteArray27 = base64_0.encode(byteArray25);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64(10, byteArray35);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false);
        boolean boolean44 = base64_36.isInAlphabet(byteArray42, true);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, true);
        byte[] byteArray48 = base64_0.encode(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, true, true, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (10) than the specified maximum size of -1");
        } catch (IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AAoKCgoB" + "'", str26, "AAoKCgoB");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[84, 68, 78, 107, 100, 108, 78, 51]");
    }

    @Test
    public void test520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test520");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        String str10 = base64_2.encodeToString(byteArray9);
        String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        String str14 = base64_1.encodeToString(byteArray12);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray19 = base64_1.encode(byteArray16, 1, 0);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, true);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64(10, byteArray32);
        byte[] byteArray34 = null;
        byte[] byteArray37 = base64_33.encode(byteArray34, 100, 76);
        boolean boolean38 = base64_33.isStrictDecoding();
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, true, (int) '#');
        long long46 = base64_39.getEncodedLength(byteArray41);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64(10, byteArray54);
        byte[] byteArray59 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false);
        boolean boolean63 = base64_55.isInAlphabet(byteArray61, true);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, true, false);
        byte[] byteArray67 = base64_39.encode(byteArray61);
        String str68 = base64_33.encodeToString(byteArray67);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_70 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray74 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, false);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray76);
        String str78 = base64_70.encodeToString(byteArray77);
        String str79 = base64_69.encodeAsString(byteArray77);
        byte[] byteArray80 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str81 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray80);
        String str82 = base64_69.encodeToString(byteArray80);
        byte[] byteArray83 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str84 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray83);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray83);
        Object obj86 = base64_69.encode((Object) byteArray83);
        byte[] byteArray87 = base64_33.decode(byteArray83);
        org.apache.commons.codec.CodecPolicy codecPolicy88 = base64_33.getCodecPolicy();
        org.apache.commons.codec.binary.Base64 base64_89 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray19, true, codecPolicy88);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo" + "'", str13, "DQo");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DQo=" + "'", str14, "DQo=");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 4L + "'", long46 == 4L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str68, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "/woK" + "'", str78, "/woK");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "/woK" + "'", str79, "/woK");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "DQo" + "'", str81, "DQo");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "DQo=" + "'", str82, "DQo=");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "DQo" + "'", str84, "DQo");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + codecPolicy88 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy88.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test521");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, false);
        byte[] byteArray28 = base64_0.encode(byteArray22);
        boolean boolean29 = base64_0.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test522");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder8.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder12 = builder10.setPadding((byte) -1);
        org.apache.commons.codec.binary.Base64.Builder builder14 = builder10.setUrlSafe(true);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, false);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger24);
        org.apache.commons.codec.binary.Base64.Builder builder27 = builder10.setLineSeparator(byteArray26);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test523");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isBase64(byteArray10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test524");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[82, 70, 70, 118]");
    }

    @Test
    public void test525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test525");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray19);
        String str21 = base64_13.encodeToString(byteArray20);
        byte[] byteArray22 = base64_8.encode(byteArray20);
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray28);
        String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        byte[] byteArray31 = base64_8.decode(byteArray28);
        org.apache.commons.codec.CodecPolicy codecPolicy32 = base64_8.getCodecPolicy();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64(10, byteArray42);
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false);
        boolean boolean51 = base64_43.isInAlphabet(byteArray49, true);
        byte[] byteArray53 = base64_43.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((-1), byteArray53);
        boolean boolean55 = base64_54.isUrlSafe();
        byte[] byteArray57 = base64_54.decode("AQoK//8K\001\n\n\ufffd\ufffd\n");
        boolean boolean58 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray57);
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray65);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65);
        boolean boolean68 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray67);
        byte[] byteArray69 = base64_59.decode(byteArray67);
        String str70 = base64_8.encodeAsString(byteArray69);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "L3dvSw" + "'", str30, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + codecPolicy32 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy32.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[47, 119, 111, 75]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str70, "L3dvSw==\001\n\n\ufffd\ufffd\n");
    }

    @Test
    public void test526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test526");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("RFFvPQ==\001\n\n\ufffd\ufffd\n");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[82, 70, 70, 118, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test527");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        String str9 = base64_1.encodeToString(byteArray8);
        boolean boolean11 = base64_1.isInAlphabet("L3dvSw==\001\n\n\ufffd\ufffd\n");
        boolean boolean12 = base64_1.isUrlSafe();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(10, byteArray20);
        byte[] byteArray22 = null;
        byte[] byteArray25 = base64_21.encode(byteArray22, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray32);
        String str34 = base64_26.encodeToString(byteArray33);
        byte[] byteArray35 = base64_21.encode(byteArray33);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64(10, byteArray43);
        byte[] byteArray48 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false);
        boolean boolean52 = base64_44.isInAlphabet(byteArray50, true);
        byte[] byteArray54 = base64_44.decode("/woK");
        byte[] byteArray55 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray55);
        boolean boolean59 = base64_44.isInAlphabet(byteArray57, true);
        byte[] byteArray60 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60);
        String str63 = base64_44.encodeAsString(byteArray62);
        boolean boolean65 = base64_21.isInAlphabet(byteArray62, true);
        String str66 = base64_1.encodeToString(byteArray62);
        String str67 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray62);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, true, false, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [DQo=]");
        } catch (IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "/woK" + "'", str34, "/woK");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "DQo" + "'", str56, "DQo");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DQo" + "'", str61, "DQo");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str63, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "RFFvPQ==" + "'", str66, "RFFvPQ==");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RFFvPQ==" + "'", str67, "RFFvPQ==");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test528");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10);
        org.apache.commons.codec.binary.Base64.Builder builder13 = builder2.setEncodeTable(byteArray10);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64(10, byteArray21);
        byte[] byteArray23 = null;
        byte[] byteArray26 = base64_22.encode(byteArray23, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray33);
        String str35 = base64_27.encodeToString(byteArray34);
        byte[] byteArray36 = base64_22.encode(byteArray34);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray42);
        String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        byte[] byteArray45 = base64_22.decode(byteArray42);
        org.apache.commons.codec.CodecPolicy codecPolicy46 = base64_22.getCodecPolicy();
        org.apache.commons.codec.binary.Base64.Builder builder47 = builder2.setDecodingPolicy(codecPolicy46);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64(10, byteArray55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        org.apache.commons.codec.binary.Base64.Builder builder58 = builder2.setEncodeTable(byteArray57);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DQo" + "'", str11, "DQo");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/woK" + "'", str35, "/woK");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "L3dvSw" + "'", str44, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + codecPolicy46 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy46.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[65, 81, 111, 75, 95, 95, 56, 75]");
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test529");
        org.apache.commons.codec.binary.Base64.Builder builder1 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy2 = null;
        org.apache.commons.codec.binary.Base64.Builder builder3 = builder1.setDecodingPolicy(codecPolicy2);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder3.setLineSeparator(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11);
        org.apache.commons.codec.binary.Base64.Builder builder14 = builder10.setLineSeparator(byteArray13);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64(10, byteArray23);
        byte[] byteArray25 = null;
        byte[] byteArray28 = base64_24.encode(byteArray25, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        String str37 = base64_29.encodeToString(byteArray36);
        byte[] byteArray38 = base64_24.encode(byteArray36);
        byte[] byteArray42 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray44);
        String str46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        byte[] byteArray47 = base64_24.decode(byteArray44);
        org.apache.commons.codec.CodecPolicy codecPolicy48 = base64_24.getCodecPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64(76, byteArray13, false, codecPolicy48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [DQo=]");
        } catch (IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "/woK" + "'", str37, "/woK");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "L3dvSw" + "'", str46, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + codecPolicy48 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy48.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test530");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(0);
        boolean boolean2 = base64_1.isStrictDecoding();
        boolean boolean4 = base64_1.isInAlphabet("AQoK//8K\001\n\n\ufffd\ufffd\n");
        boolean boolean5 = base64_1.isStrictDecoding();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test531");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true);
        String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "L3dvSw" + "'", str19, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[76, 51, 100, 118, 83, 119, 61, 61]");
    }

    @Test
    public void test532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test532");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        byte[] byteArray19 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray19);
        boolean boolean23 = base64_8.isInAlphabet(byteArray21, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        String str27 = base64_8.encodeAsString(byteArray26);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64(10, byteArray35);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false);
        boolean boolean44 = base64_36.isInAlphabet(byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray47 = base64_36.decode(byteArray46);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, true);
        long long51 = base64_8.getEncodedLength(byteArray46);
        org.apache.commons.codec.CodecPolicy codecPolicy52 = base64_8.getCodecPolicy();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo" + "'", str20, "DQo");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo" + "'", str25, "DQo");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str27, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 14L + "'", long51 == 14L);
        org.junit.Assert.assertTrue("'" + codecPolicy52 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy52.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test533");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        String str9 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(64, byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray17);
        String str19 = base64_11.encodeToString(byteArray18);
        boolean boolean21 = base64_11.isInAlphabet("L3dvSw==\001\n\n\ufffd\ufffd\n");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray40 = base64_30.decode("DQo");
        boolean boolean41 = base64_30.isUrlSafe();
        byte[] byteArray43 = base64_30.decode("DQo=");
        org.apache.commons.codec.binary.Base64.Builder builder44 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy45 = null;
        org.apache.commons.codec.binary.Base64.Builder builder46 = builder44.setDecodingPolicy(codecPolicy45);
        org.apache.commons.codec.binary.Base64.Builder builder48 = builder46.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder50 = builder46.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_51 = builder46.get();
        org.apache.commons.codec.binary.Base64.Builder builder52 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy53 = null;
        org.apache.commons.codec.binary.Base64.Builder builder54 = builder52.setDecodingPolicy(codecPolicy53);
        org.apache.commons.codec.binary.Base64.Builder builder56 = builder54.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy57 = null;
        org.apache.commons.codec.binary.Base64.Builder builder58 = builder54.setDecodingPolicy(codecPolicy57);
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray64);
        org.apache.commons.codec.binary.Base64.Builder builder66 = builder58.setEncodeTable(byteArray64);
        long long67 = base64_51.getEncodedLength(byteArray64);
        String str68 = base64_30.encodeToString(byteArray64);
        String str69 = base64_11.encodeAsString(byteArray64);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray72 = base64_10.encode(byteArray64, 1, 76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/woK" + "'", str19, "/woK");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[13, 10]");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(base64_51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 8L + "'", long67 == 8L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str68, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "L3dvSw==" + "'", str69, "L3dvSw==");
    }

    @Test
    public void test534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test534");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray28);
        String str30 = base64_22.encodeToString(byteArray29);
        String str31 = base64_21.encodeAsString(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        String str34 = base64_21.encodeToString(byteArray32);
        byte[] byteArray37 = base64_20.encode(byteArray32, (int) (short) 100, 0);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray45);
        String str47 = base64_39.encodeToString(byteArray46);
        String str48 = base64_38.encodeAsString(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray49);
        byte[] byteArray51 = base64_38.decode(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52);
        long long54 = base64_20.getEncodedLength(byteArray52);
        boolean boolean55 = base64_20.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray63);
        String str65 = base64_57.encodeToString(byteArray64);
        String str66 = base64_56.encodeAsString(byteArray64);
        byte[] byteArray67 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray67);
        byte[] byteArray69 = base64_56.decode(byteArray67);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70);
        String str72 = base64_20.encodeAsString(byteArray70);
        Object obj73 = null;
        // The following exception was thrown during execution in test generation
        try {
            Object obj74 = base64_20.encode(obj73);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/woK" + "'", str31, "/woK");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DQo" + "'", str33, "DQo");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DQo=" + "'", str34, "DQo=");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/woK" + "'", str47, "/woK");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "/woK" + "'", str48, "/woK");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "/woK" + "'", str65, "/woK");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "/woK" + "'", str66, "/woK");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test535");
        org.apache.commons.codec.binary.Base64.Builder builder1 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy2 = null;
        org.apache.commons.codec.binary.Base64.Builder builder3 = builder1.setDecodingPolicy(codecPolicy2);
        org.apache.commons.codec.binary.Base64.Builder builder5 = builder3.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder7 = builder3.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_8 = builder3.get();
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.decodeBase64("AQoK//8K");
        org.apache.commons.codec.binary.Base64.Builder builder11 = builder3.setEncodeTable(byteArray10);
        org.apache.commons.codec.binary.Base64.Builder builder13 = builder11.setUrlSafe(true);
        org.apache.commons.codec.binary.Base64.Builder builder15 = builder13.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder17 = builder15.setPadding((byte) 1);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(10, byteArray25);
        byte[] byteArray27 = null;
        byte[] byteArray30 = base64_26.encode(byteArray27, 100, 76);
        boolean boolean31 = base64_26.isStrictDecoding();
        org.apache.commons.codec.binary.Base64.Builder builder32 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy33 = null;
        org.apache.commons.codec.binary.Base64.Builder builder34 = builder32.setDecodingPolicy(codecPolicy33);
        org.apache.commons.codec.binary.Base64.Builder builder36 = builder34.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy37 = null;
        org.apache.commons.codec.binary.Base64.Builder builder38 = builder34.setDecodingPolicy(codecPolicy37);
        org.apache.commons.codec.CodecPolicy codecPolicy39 = null;
        org.apache.commons.codec.binary.Base64.Builder builder40 = builder34.setDecodingPolicy(codecPolicy39);
        org.apache.commons.codec.binary.Base64.Builder builder42 = builder40.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray50);
        String str52 = base64_44.encodeToString(byteArray51);
        String str53 = base64_43.encodeAsString(byteArray51);
        byte[] byteArray54 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        byte[] byteArray56 = base64_43.decode(byteArray54);
        org.apache.commons.codec.binary.Base64.Builder builder57 = builder40.setEncodeTable(byteArray54);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, true, true);
        boolean boolean62 = base64_26.isInAlphabet(byteArray54, false);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray67 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray69);
        String str71 = base64_63.encodeToString(byteArray70);
        byte[] byteArray73 = base64_63.decode("");
        boolean boolean74 = base64_63.isStrictDecoding();
        byte[] byteArray78 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78, false);
        String str81 = base64_63.encodeToString(byteArray78);
        byte[] byteArray85 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85, false);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray87);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray87);
        boolean boolean91 = base64_63.isInAlphabet(byteArray87, true);
        String str92 = base64_26.encodeToString(byteArray87);
        org.apache.commons.codec.binary.Base64.Builder builder93 = builder15.setLineSeparator(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_94 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [/woK]");
        } catch (IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(base64_8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "/woK" + "'", str52, "/woK");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "/woK" + "'", str53, "/woK");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "/woK" + "'", str71, "/woK");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[47, 119, 111, 75]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "/woK" + "'", str81, "/woK");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str92, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test536");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        String str9 = base64_1.encodeToString(byteArray8);
        String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        String str13 = base64_0.encodeToString(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray18 = base64_0.encode(byteArray15, 1, 0);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false);
        long long25 = base64_0.getEncodedLength(byteArray24);
        boolean boolean26 = base64_0.isStrictDecoding();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 8L + "'", long25 == 8L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test537");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setLineLength(0);
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setPadding((byte) 100);
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder6.setUrlSafe(true);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray16);
        String str18 = base64_10.encodeToString(byteArray17);
        String str19 = base64_9.encodeAsString(byteArray17);
        byte[] byteArray20 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        String str22 = base64_9.encodeToString(byteArray20);
        boolean boolean23 = base64_9.isStrictDecoding();
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray28 = base64_9.encode(byteArray25, (int) 'a', (int) (byte) 100);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, true, true);
        org.apache.commons.codec.binary.Base64.Builder builder33 = builder6.setLineSeparator(byteArray32);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/woK" + "'", str18, "/woK");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/woK" + "'", str19, "/woK");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DQo" + "'", str21, "DQo");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DQo=" + "'", str22, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test538");
        byte[] byteArray1 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray1, true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(10, byteArray13);
        byte[] byteArray15 = null;
        byte[] byteArray18 = base64_14.encode(byteArray15, 100, 76);
        boolean boolean19 = base64_14.isStrictDecoding();
        org.apache.commons.codec.binary.Base64.Builder builder20 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy21 = null;
        org.apache.commons.codec.binary.Base64.Builder builder22 = builder20.setDecodingPolicy(codecPolicy21);
        org.apache.commons.codec.binary.Base64.Builder builder24 = builder22.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy25 = null;
        org.apache.commons.codec.binary.Base64.Builder builder26 = builder22.setDecodingPolicy(codecPolicy25);
        org.apache.commons.codec.CodecPolicy codecPolicy27 = null;
        org.apache.commons.codec.binary.Base64.Builder builder28 = builder22.setDecodingPolicy(codecPolicy27);
        org.apache.commons.codec.binary.Base64.Builder builder30 = builder28.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray38);
        String str40 = base64_32.encodeToString(byteArray39);
        String str41 = base64_31.encodeAsString(byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        byte[] byteArray44 = base64_31.decode(byteArray42);
        org.apache.commons.codec.binary.Base64.Builder builder45 = builder28.setEncodeTable(byteArray42);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true);
        boolean boolean50 = base64_14.isInAlphabet(byteArray42, false);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, false);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray57);
        String str59 = base64_51.encodeToString(byteArray58);
        byte[] byteArray61 = base64_51.decode("");
        boolean boolean62 = base64_51.isStrictDecoding();
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false);
        String str69 = base64_51.encodeToString(byteArray66);
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray75);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray75);
        boolean boolean79 = base64_51.isInAlphabet(byteArray75, true);
        String str80 = base64_14.encodeToString(byteArray75);
        byte[] byteArray81 = base64_5.decode(byteArray75);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray75, true, true, (int) 'a');
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "/woK" + "'", str40, "/woK");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "/woK" + "'", str41, "/woK");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "/woK" + "'", str59, "/woK");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[47, 119, 111, 75]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "/woK" + "'", str69, "/woK");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str80, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[76, 51, 100, 118, 83, 119, 13, 10]");
    }

    @Test
    public void test539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test539");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, true, true, (int) '#');
        long long21 = base64_14.getEncodedLength(byteArray16);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true, false);
        byte[] byteArray42 = base64_14.encode(byteArray36);
        String str43 = base64_8.encodeToString(byteArray42);
        org.apache.commons.codec.binary.Base64.Builder builder44 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy45 = null;
        org.apache.commons.codec.binary.Base64.Builder builder46 = builder44.setDecodingPolicy(codecPolicy45);
        org.apache.commons.codec.binary.Base64.Builder builder48 = builder46.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy49 = null;
        org.apache.commons.codec.binary.Base64.Builder builder50 = builder46.setDecodingPolicy(codecPolicy49);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = null;
        org.apache.commons.codec.binary.Base64.Builder builder52 = builder46.setDecodingPolicy(codecPolicy51);
        org.apache.commons.codec.binary.Base64.Builder builder54 = builder52.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray62);
        String str64 = base64_56.encodeToString(byteArray63);
        String str65 = base64_55.encodeAsString(byteArray63);
        byte[] byteArray66 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray68 = base64_55.decode(byteArray66);
        org.apache.commons.codec.binary.Base64.Builder builder69 = builder52.setEncodeTable(byteArray66);
        boolean boolean71 = base64_8.isInAlphabet(byteArray66, false);
        org.apache.commons.codec.CodecPolicy codecPolicy72 = base64_8.getCodecPolicy();
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_81 = new org.apache.commons.codec.binary.Base64(10, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85, false);
        boolean boolean89 = base64_81.isInAlphabet(byteArray87, true);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray92 = base64_81.decode(byteArray91);
        long long93 = base64_8.getEncodedLength(byteArray92);
        boolean boolean94 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray92);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str43, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "/woK" + "'", str64, "/woK");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "/woK" + "'", str65, "/woK");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy72 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy72.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test540");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.Base64 base64_7 = builder2.get();
        org.apache.commons.codec.CodecPolicy codecPolicy8 = base64_7.getCodecPolicy();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertTrue("'" + codecPolicy8 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy8.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test541");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        boolean boolean19 = base64_8.isStrictDecoding();
        boolean boolean20 = base64_8.isStrictDecoding();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64(10, byteArray28);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false);
        boolean boolean37 = base64_29.isInAlphabet(byteArray35, true);
        byte[] byteArray39 = base64_29.decode("/woK");
        byte[] byteArray40 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        boolean boolean44 = base64_29.isInAlphabet(byteArray42, true);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false, (int) ' ');
        byte[] byteArray49 = base64_8.encode(byteArray42);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DQo" + "'", str41, "DQo");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
    }

    @Test
    public void test542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test542");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, false);
        byte[] byteArray28 = base64_0.encode(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        Object obj39 = base64_0.decode((Object) byteArray38);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64(10, byteArray47);
        byte[] byteArray49 = null;
        byte[] byteArray52 = base64_48.encode(byteArray49, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray59);
        String str61 = base64_53.encodeToString(byteArray60);
        byte[] byteArray62 = base64_48.encode(byteArray60);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_71 = new org.apache.commons.codec.binary.Base64(10, byteArray70);
        byte[] byteArray75 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray75, false);
        boolean boolean79 = base64_71.isInAlphabet(byteArray77, true);
        byte[] byteArray81 = base64_71.decode("/woK");
        byte[] byteArray82 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str83 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray82);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray82);
        boolean boolean86 = base64_71.isInAlphabet(byteArray84, true);
        byte[] byteArray87 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str88 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray87);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray87);
        String str90 = base64_71.encodeAsString(byteArray89);
        boolean boolean92 = base64_48.isInAlphabet(byteArray89, true);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray89);
        byte[] byteArray94 = base64_0.decode(byteArray93);
        org.apache.commons.codec.CodecPolicy codecPolicy95 = base64_0.getCodecPolicy();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "/woK" + "'", str61, "/woK");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "DQo" + "'", str83, "DQo");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "DQo" + "'", str88, "DQo");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str90, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + codecPolicy95 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy95.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test543");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        org.apache.commons.codec.binary.Base64.Builder builder10 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy11 = null;
        org.apache.commons.codec.binary.Base64.Builder builder12 = builder10.setDecodingPolicy(codecPolicy11);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder19 = builder12.setLineSeparator(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20);
        org.apache.commons.codec.binary.Base64.Builder builder23 = builder12.setEncodeTable(byteArray20);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(10, byteArray31);
        byte[] byteArray33 = null;
        byte[] byteArray36 = base64_32.encode(byteArray33, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray43);
        String str45 = base64_37.encodeToString(byteArray44);
        byte[] byteArray46 = base64_32.encode(byteArray44);
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray52);
        String str54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray52);
        byte[] byteArray55 = base64_32.decode(byteArray52);
        org.apache.commons.codec.CodecPolicy codecPolicy56 = base64_32.getCodecPolicy();
        org.apache.commons.codec.binary.Base64.Builder builder57 = builder12.setDecodingPolicy(codecPolicy56);
        org.apache.commons.codec.binary.Base64.Builder builder58 = builder2.setDecodingPolicy(codecPolicy56);
        org.apache.commons.codec.binary.Base64.Builder builder60 = builder2.setUrlSafe(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DQo" + "'", str21, "DQo");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "/woK" + "'", str45, "/woK");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "L3dvSw" + "'", str54, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + codecPolicy56 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy56.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test544");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, false);
        byte[] byteArray28 = base64_0.encode(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        Object obj39 = base64_0.decode((Object) byteArray38);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64(10, byteArray47);
        byte[] byteArray49 = null;
        byte[] byteArray52 = base64_48.encode(byteArray49, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray59);
        String str61 = base64_53.encodeToString(byteArray60);
        byte[] byteArray62 = base64_48.encode(byteArray60);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_71 = new org.apache.commons.codec.binary.Base64(10, byteArray70);
        byte[] byteArray75 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray75, false);
        boolean boolean79 = base64_71.isInAlphabet(byteArray77, true);
        byte[] byteArray81 = base64_71.decode("/woK");
        byte[] byteArray82 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str83 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray82);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray82);
        boolean boolean86 = base64_71.isInAlphabet(byteArray84, true);
        byte[] byteArray87 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str88 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray87);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray87);
        String str90 = base64_71.encodeAsString(byteArray89);
        boolean boolean92 = base64_48.isInAlphabet(byteArray89, true);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray89);
        byte[] byteArray94 = base64_0.decode(byteArray93);
        byte[] byteArray95 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray94);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "/woK" + "'", str61, "/woK");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "DQo" + "'", str83, "DQo");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "DQo" + "'", str88, "DQo");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str90, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
    }

    @Test
    public void test545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test545");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        String str7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "L3dvSw" + "'", str7, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[76, 51, 100, 118, 83, 119, 61, 61]");
    }

    @Test
    public void test546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test546");
        org.apache.commons.codec.binary.Base64.Builder builder1 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy2 = null;
        org.apache.commons.codec.binary.Base64.Builder builder3 = builder1.setDecodingPolicy(codecPolicy2);
        org.apache.commons.codec.binary.Base64.Builder builder5 = builder3.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy6 = null;
        org.apache.commons.codec.binary.Base64.Builder builder7 = builder3.setDecodingPolicy(codecPolicy6);
        org.apache.commons.codec.binary.Base64.Builder builder9 = builder3.setUrlSafe(true);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(10, byteArray17);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false);
        boolean boolean26 = base64_18.isInAlphabet(byteArray24, true);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray29 = base64_18.decode(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, true);
        org.apache.commons.codec.binary.Base64.Builder builder33 = builder3.setEncodeTable(byteArray28);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64(10, byteArray42);
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false);
        boolean boolean51 = base64_43.isInAlphabet(byteArray49, true);
        byte[] byteArray53 = base64_43.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((-1), byteArray53);
        org.apache.commons.codec.binary.Base64.Builder builder55 = builder3.setLineSeparator(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64(10, byteArray64);
        byte[] byteArray69 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, false);
        boolean boolean73 = base64_65.isInAlphabet(byteArray71, true);
        byte[] byteArray75 = base64_65.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64((-1), byteArray75);
        boolean boolean77 = base64_76.isUrlSafe();
        byte[] byteArray79 = base64_76.decode("AQoK//8K\001\n\n\ufffd\ufffd\n");
        org.apache.commons.codec.binary.Base64.Builder builder80 = builder3.setLineSeparator(byteArray79);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_83 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray81, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [AQoK//8K]");
        } catch (IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[13, 10]");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[65, 81, 111, 75, 47, 47, 56, 75]");
    }

    @Test
    public void test547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test547");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        String str10 = base64_2.encodeToString(byteArray9);
        String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        byte[] byteArray14 = base64_1.decode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        String str24 = base64_16.encodeToString(byteArray23);
        String str25 = base64_15.encodeAsString(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        String str28 = base64_15.encodeToString(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray33 = base64_15.encode(byteArray30, 1, 0);
        String str34 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray33);
        String str35 = base64_1.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64.Builder builder36 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy37 = null;
        org.apache.commons.codec.binary.Base64.Builder builder38 = builder36.setDecodingPolicy(codecPolicy37);
        org.apache.commons.codec.binary.Base64.Builder builder40 = builder38.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy41 = null;
        org.apache.commons.codec.binary.Base64.Builder builder42 = builder38.setDecodingPolicy(codecPolicy41);
        org.apache.commons.codec.CodecPolicy codecPolicy43 = null;
        org.apache.commons.codec.binary.Base64.Builder builder44 = builder38.setDecodingPolicy(codecPolicy43);
        org.apache.commons.codec.binary.Base64.Builder builder46 = builder44.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray54);
        String str56 = base64_48.encodeToString(byteArray55);
        String str57 = base64_47.encodeAsString(byteArray55);
        byte[] byteArray58 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        byte[] byteArray60 = base64_47.decode(byteArray58);
        org.apache.commons.codec.binary.Base64.Builder builder61 = builder44.setEncodeTable(byteArray58);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, true, true);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false, true);
        String str68 = base64_1.encodeAsString(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_70 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray58, false);
        byte[] byteArray74 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, false);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray76);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray76);
        String str79 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray78);
        boolean boolean81 = base64_70.isInAlphabet(byteArray78, true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "/woK" + "'", str24, "/woK");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "/woK" + "'", str25, "/woK");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DQo" + "'", str27, "DQo");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DQo=" + "'", str28, "DQo=");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "/woK" + "'", str56, "/woK");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "/woK" + "'", str57, "/woK");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[68, 81, 111]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DQo=" + "'", str68, "DQo=");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "TDNkdlN3PT0" + "'", str79, "TDNkdlN3PT0");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test548");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder7 = builder0.setLineSeparator(byteArray6);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[85, 107, 90, 71, 100, 107, 82, 82, 98, 122, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[85, 107, 90, 71, 100, 107, 82, 82, 98, 122, 48]");
    }

    @Test
    public void test549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test549");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.Base64 base64_9 = builder2.get();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(base64_9);
    }

    @Test
    public void test550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test550");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        String str9 = base64_1.encodeToString(byteArray8);
        String str10 = base64_0.encodeAsString(byteArray8);
        boolean boolean11 = base64_0.isStrictDecoding();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(10, byteArray20);
        byte[] byteArray22 = null;
        byte[] byteArray25 = base64_21.encode(byteArray22, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray32);
        String str34 = base64_26.encodeToString(byteArray33);
        byte[] byteArray35 = base64_21.encode(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray33);
        long long37 = base64_0.getEncodedLength(byteArray33);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, false);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "/woK" + "'", str34, "/woK");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 4L + "'", long37 == 4L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
    }

    @Test
    public void test551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test551");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy2 = base64_1.getCodecPolicy();
        boolean boolean3 = base64_1.isUrlSafe();
        org.junit.Assert.assertTrue("'" + codecPolicy2 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy2.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test552");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.Base64.Builder builder14 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy15 = null;
        org.apache.commons.codec.binary.Base64.Builder builder16 = builder14.setDecodingPolicy(codecPolicy15);
        org.apache.commons.codec.binary.Base64.Builder builder18 = builder16.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy19 = null;
        org.apache.commons.codec.binary.Base64.Builder builder20 = builder16.setDecodingPolicy(codecPolicy19);
        org.apache.commons.codec.CodecPolicy codecPolicy21 = null;
        org.apache.commons.codec.binary.Base64.Builder builder22 = builder16.setDecodingPolicy(codecPolicy21);
        org.apache.commons.codec.binary.Base64.Builder builder24 = builder22.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray32);
        String str34 = base64_26.encodeToString(byteArray33);
        String str35 = base64_25.encodeAsString(byteArray33);
        byte[] byteArray36 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        byte[] byteArray38 = base64_25.decode(byteArray36);
        org.apache.commons.codec.binary.Base64.Builder builder39 = builder22.setEncodeTable(byteArray36);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true, true);
        boolean boolean44 = base64_8.isInAlphabet(byteArray36, false);
        byte[] byteArray45 = null;
        String str46 = base64_8.encodeToString(byteArray45);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "/woK" + "'", str34, "/woK");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/woK" + "'", str35, "/woK");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test553");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test554");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10);
        org.apache.commons.codec.binary.Base64.Builder builder13 = builder9.setLineSeparator(byteArray12);
        org.apache.commons.codec.binary.Base64.Builder builder14 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy15 = null;
        org.apache.commons.codec.binary.Base64.Builder builder16 = builder14.setDecodingPolicy(codecPolicy15);
        org.apache.commons.codec.binary.Base64.Builder builder18 = builder16.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder20 = builder16.setPadding((byte) 0);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64(10, byteArray28);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false);
        boolean boolean37 = base64_29.isInAlphabet(byteArray35, true);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, true, false);
        java.math.BigInteger bigInteger45 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        org.apache.commons.codec.binary.Base64.Builder builder46 = builder20.setEncodeTable(byteArray44);
        org.apache.commons.codec.binary.Base64.Builder builder48 = builder46.setPadding((byte) 10);
        org.apache.commons.codec.binary.Base64.Builder builder49 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy50 = null;
        org.apache.commons.codec.binary.Base64.Builder builder51 = builder49.setDecodingPolicy(codecPolicy50);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder58 = builder51.setLineSeparator(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59);
        org.apache.commons.codec.binary.Base64.Builder builder62 = builder51.setEncodeTable(byteArray59);
        org.apache.commons.codec.binary.Base64.Builder builder63 = builder46.setLineSeparator(byteArray59);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        org.apache.commons.codec.binary.Base64.Builder builder66 = builder63.setEncodeTable(byteArray65);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64(10, byteArray74);
        byte[] byteArray79 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray79, false);
        boolean boolean83 = base64_75.isInAlphabet(byteArray81, true);
        org.apache.commons.codec.CodecPolicy codecPolicy84 = base64_75.getCodecPolicy();
        org.apache.commons.codec.binary.Base64.Builder builder85 = builder66.setDecodingPolicy(codecPolicy84);
        org.apache.commons.codec.binary.Base64.Builder builder86 = builder13.setDecodingPolicy(codecPolicy84);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DQo" + "'", str11, "DQo");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "DQo" + "'", str60, "DQo");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[13, 10]");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + codecPolicy84 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy84.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test555");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy2 = base64_1.getCodecPolicy();
        org.apache.commons.codec.CodecPolicy codecPolicy3 = base64_1.getCodecPolicy();
        org.junit.Assert.assertTrue("'" + codecPolicy2 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy2.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + codecPolicy3 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy3.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test556");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        boolean boolean2 = base64_1.isStrictDecoding();
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray10);
        String str12 = base64_4.encodeToString(byteArray11);
        String str13 = base64_3.encodeAsString(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        String str16 = base64_3.encodeToString(byteArray14);
        boolean boolean17 = base64_3.isStrictDecoding();
        boolean boolean18 = base64_3.isStrictDecoding();
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) '#');
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        Object obj26 = base64_3.encode((Object) byteArray24);
        Object obj27 = base64_1.decode((Object) byteArray24);
        byte[] byteArray29 = base64_1.decode("RFFvDQo");
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray38);
        String str40 = base64_32.encodeToString(byteArray39);
        String str41 = base64_31.encodeAsString(byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        byte[] byteArray44 = base64_31.decode(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray42);
        boolean boolean46 = org.apache.commons.codec.binary.Base64.isBase64(byteArray42);
        String str47 = base64_1.encodeToString(byteArray42);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/woK" + "'", str12, "/woK");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/woK" + "'", str13, "/woK");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DQo" + "'", str15, "DQo");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DQo=" + "'", str16, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "/woK" + "'", str40, "/woK");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "/woK" + "'", str41, "/woK");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "DQo=" + "'", str47, "DQo=");
    }

    @Test
    public void test557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test557");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        String str9 = base64_1.encodeToString(byteArray8);
        String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        String str13 = base64_0.encodeToString(byteArray11);
        boolean boolean14 = base64_0.isStrictDecoding();
        boolean boolean15 = base64_0.isStrictDecoding();
        boolean boolean16 = base64_0.isUrlSafe();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(10, byteArray25);
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        boolean boolean34 = base64_26.isInAlphabet(byteArray32, true);
        byte[] byteArray36 = base64_26.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((-1), byteArray36);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray45);
        String str47 = base64_39.encodeToString(byteArray46);
        String str48 = base64_38.encodeAsString(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        String str51 = base64_38.encodeToString(byteArray49);
        byte[] byteArray54 = base64_37.encode(byteArray49, (int) (short) 100, 0);
        boolean boolean55 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            Object obj57 = base64_0.encode((Object) bigInteger56);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/woK" + "'", str47, "/woK");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "/woK" + "'", str48, "/woK");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DQo" + "'", str50, "DQo");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DQo=" + "'", str51, "DQo=");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(bigInteger56);
    }

    @Test
    public void test558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test558");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray1);
    }

    @Test
    public void test559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test559");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray1);
    }

    @Test
    public void test560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test560");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        String str9 = base64_1.encodeToString(byteArray8);
        String str10 = base64_0.encodeAsString(byteArray8);
        boolean boolean11 = base64_0.isStrictDecoding();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(10, byteArray20);
        byte[] byteArray22 = null;
        byte[] byteArray25 = base64_21.encode(byteArray22, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray32);
        String str34 = base64_26.encodeToString(byteArray33);
        byte[] byteArray35 = base64_21.encode(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray33);
        long long37 = base64_0.getEncodedLength(byteArray33);
        byte[] byteArray38 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray38);
        Object obj40 = base64_0.encode((Object) byteArray38);
        boolean boolean41 = org.apache.commons.codec.binary.Base64.isBase64(byteArray38);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "/woK" + "'", str34, "/woK");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 4L + "'", long37 == 4L);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test561");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        String str10 = base64_2.encodeToString(byteArray9);
        String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        byte[] byteArray14 = base64_1.decode(byteArray12);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(0, byteArray14);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test562");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setLineLength(0);
        org.apache.commons.codec.binary.Base64 base64_5 = builder4.get();
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray12);
        String str14 = base64_6.encodeToString(byteArray13);
        byte[] byteArray16 = base64_6.decode("");
        boolean boolean18 = base64_6.isInAlphabet("AQoK//8K");
        byte[] byteArray19 = null;
        String str20 = base64_6.encodeToString(byteArray19);
        boolean boolean22 = base64_6.isInAlphabet("TDNkdlN3\r\n");
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64(10, byteArray30);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        boolean boolean39 = base64_31.isInAlphabet(byteArray37, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray42 = base64_31.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray50);
        String str52 = base64_44.encodeToString(byteArray51);
        String str53 = base64_43.encodeAsString(byteArray51);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64(10, byteArray61);
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false);
        boolean boolean70 = base64_62.isInAlphabet(byteArray68, true);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68, false, true);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray68);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68, true, false);
        java.math.BigInteger bigInteger78 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray77);
        byte[] byteArray79 = base64_43.encode(byteArray77);
        Object obj80 = base64_31.encode((Object) byteArray79);
        String str81 = base64_6.encodeToString(byteArray79);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray79);
        org.apache.commons.codec.binary.Base64.Builder builder83 = builder4.setLineSeparator(byteArray82);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(base64_5);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/woK" + "'", str14, "/woK");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "/woK" + "'", str52, "/woK");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "/woK" + "'", str53, "/woK");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "VEROa2RsTjNQVDBOQ2c9PQ==" + "'", str81, "VEROa2RsTjNQVDBOQ2c9PQ==");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test563");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61]");
    }

    @Test
    public void test564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test564");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, false);
        byte[] byteArray28 = base64_0.encode(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        Object obj39 = base64_0.decode((Object) byteArray38);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64(10, byteArray47);
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false);
        boolean boolean56 = base64_48.isInAlphabet(byteArray54, true);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray59 = base64_48.decode(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray65 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, false);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray67);
        String str69 = base64_61.encodeToString(byteArray68);
        String str70 = base64_60.encodeAsString(byteArray68);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64(10, byteArray78);
        byte[] byteArray83 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray83, false);
        boolean boolean87 = base64_79.isInAlphabet(byteArray85, true);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85, false, true);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray85);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85, true, false);
        java.math.BigInteger bigInteger95 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray94);
        byte[] byteArray96 = base64_60.encode(byteArray94);
        Object obj97 = base64_48.encode((Object) byteArray96);
        String str98 = base64_0.encodeAsString(byteArray96);
        Class<?> wildcardClass99 = base64_0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "/woK" + "'", str69, "/woK");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "/woK" + "'", str70, "/woK");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger95);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "VEROa2RsTjNQVDBOQ2c9PQ==" + "'", str98, "VEROa2RsTjNQVDBOQ2c9PQ==");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test565");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray1);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray1);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(bigInteger7);
    }

    @Test
    public void test566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test566");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray14);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true, false);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, true);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103]");
        org.junit.Assert.assertNotNull(bigInteger28);
    }

    @Test
    public void test567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test567");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        String str9 = base64_1.encodeToString(byteArray8);
        String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        String str13 = base64_0.encodeToString(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray14);
        Object obj17 = base64_0.encode((Object) byteArray14);
        org.apache.commons.codec.binary.Base64.Builder builder18 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy19 = null;
        org.apache.commons.codec.binary.Base64.Builder builder20 = builder18.setDecodingPolicy(codecPolicy19);
        org.apache.commons.codec.binary.Base64.Builder builder22 = builder20.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder24 = builder20.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_25 = builder20.get();
        org.apache.commons.codec.binary.Base64.Builder builder26 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy27 = null;
        org.apache.commons.codec.binary.Base64.Builder builder28 = builder26.setDecodingPolicy(codecPolicy27);
        org.apache.commons.codec.binary.Base64.Builder builder30 = builder28.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy31 = null;
        org.apache.commons.codec.binary.Base64.Builder builder32 = builder28.setDecodingPolicy(codecPolicy31);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray38);
        org.apache.commons.codec.binary.Base64.Builder builder40 = builder32.setEncodeTable(byteArray38);
        long long41 = base64_25.getEncodedLength(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        byte[] byteArray44 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44);
        byte[] byteArray47 = base64_43.encode(byteArray46);
        Object obj48 = base64_25.encode((Object) byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        String str50 = base64_0.encodeAsString(byteArray46);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DQo" + "'", str15, "DQo");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(base64_25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 8L + "'", long41 == 8L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DQo" + "'", str45, "DQo");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[82, 70, 70, 118, 80, 81]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RFFvPQ==" + "'", str50, "RFFvPQ==");
    }

    @Test
    public void test568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test568");
        org.apache.commons.codec.binary.Base64.Builder builder0 = new org.apache.commons.codec.binary.Base64.Builder();
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setPadding((byte) 0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test569");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        boolean boolean19 = base64_8.isStrictDecoding();
        byte[] byteArray20 = null;
        byte[] byteArray21 = base64_8.decode(byteArray20);
        byte[] byteArray23 = base64_8.decode("RFFvPQ==");
        org.apache.commons.codec.CodecPolicy codecPolicy24 = base64_8.getCodecPolicy();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[68, 81, 111, 61]");
        org.junit.Assert.assertTrue("'" + codecPolicy24 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy24.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test570");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(10, byteArray8);
        byte[] byteArray10 = null;
        byte[] byteArray13 = base64_9.encode(byteArray10, 100, 76);
        boolean boolean14 = base64_9.isStrictDecoding();
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, true, true, (int) '#');
        long long22 = base64_15.getEncodedLength(byteArray17);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64(10, byteArray30);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        boolean boolean39 = base64_31.isInAlphabet(byteArray37, true);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true, false);
        byte[] byteArray43 = base64_15.encode(byteArray37);
        String str44 = base64_9.encodeToString(byteArray43);
        org.apache.commons.codec.binary.Base64.Builder builder45 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy46 = null;
        org.apache.commons.codec.binary.Base64.Builder builder47 = builder45.setDecodingPolicy(codecPolicy46);
        org.apache.commons.codec.binary.Base64.Builder builder49 = builder47.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy50 = null;
        org.apache.commons.codec.binary.Base64.Builder builder51 = builder47.setDecodingPolicy(codecPolicy50);
        org.apache.commons.codec.CodecPolicy codecPolicy52 = null;
        org.apache.commons.codec.binary.Base64.Builder builder53 = builder47.setDecodingPolicy(codecPolicy52);
        org.apache.commons.codec.binary.Base64.Builder builder55 = builder53.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray63);
        String str65 = base64_57.encodeToString(byteArray64);
        String str66 = base64_56.encodeAsString(byteArray64);
        byte[] byteArray67 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray67);
        byte[] byteArray69 = base64_56.decode(byteArray67);
        org.apache.commons.codec.binary.Base64.Builder builder70 = builder53.setEncodeTable(byteArray67);
        boolean boolean72 = base64_9.isInAlphabet(byteArray67, false);
        org.apache.commons.codec.CodecPolicy codecPolicy73 = base64_9.getCodecPolicy();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_82 = new org.apache.commons.codec.binary.Base64(10, byteArray81);
        byte[] byteArray86 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86, false);
        boolean boolean90 = base64_82.isInAlphabet(byteArray88, true);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray93 = base64_82.decode(byteArray92);
        long long94 = base64_9.getEncodedLength(byteArray93);
        byte[] byteArray95 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray93);
        org.apache.commons.codec.binary.Base64 base64_96 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray95);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4L + "'", long22 == 4L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str44, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "/woK" + "'", str65, "/woK");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "/woK" + "'", str66, "/woK");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy73 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy73.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
    }

    @Test
    public void test571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test571");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        byte[] byteArray20 = new byte[] {};
        String str21 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray20);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false, true, (int) (short) -1);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        byte[] byteArray27 = base64_9.decode(byteArray20);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isBase64(byteArray20);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray20);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, true);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray31, false);
        byte[] byteArray37 = base64_35.decode("AAoKCgoB");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10, 10, 10, 10, 1]");
    }

    @Test
    public void test572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test572");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray14);
        Class<?> wildcardClass21 = byteArray20.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test573");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isBase64(byteArray11);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test574");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_7 = builder2.get();
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 100 };
        byte[] byteArray12 = base64_7.encode(byteArray11);
        byte[] byteArray14 = base64_7.decode("TDNkdlN3PT0NCg");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 10, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 81, 112, 107]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
    }

    @Test
    public void test575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test575");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, true, true, (int) '#');
        long long21 = base64_14.getEncodedLength(byteArray16);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true, false);
        byte[] byteArray42 = base64_14.encode(byteArray36);
        String str43 = base64_8.encodeToString(byteArray42);
        String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str43, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "TDNkdlN3PT0" + "'", str44, "TDNkdlN3PT0");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61]");
    }

    @Test
    public void test576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test576");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_7 = builder2.get();
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64("AQoK//8K");
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder2.setEncodeTable(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_11 = builder2.get();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: encodeTable must have exactly 64 entries.");
        } catch (IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test577");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("DQo");
        boolean boolean19 = base64_8.isUrlSafe();
        byte[] byteArray21 = base64_8.decode("DQo=");
        org.apache.commons.codec.binary.Base64.Builder builder22 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy23 = null;
        org.apache.commons.codec.binary.Base64.Builder builder24 = builder22.setDecodingPolicy(codecPolicy23);
        org.apache.commons.codec.binary.Base64.Builder builder26 = builder24.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder28 = builder24.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_29 = builder24.get();
        org.apache.commons.codec.binary.Base64.Builder builder30 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy31 = null;
        org.apache.commons.codec.binary.Base64.Builder builder32 = builder30.setDecodingPolicy(codecPolicy31);
        org.apache.commons.codec.binary.Base64.Builder builder34 = builder32.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy35 = null;
        org.apache.commons.codec.binary.Base64.Builder builder36 = builder32.setDecodingPolicy(codecPolicy35);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray42);
        org.apache.commons.codec.binary.Base64.Builder builder44 = builder36.setEncodeTable(byteArray42);
        long long45 = base64_29.getEncodedLength(byteArray42);
        String str46 = base64_8.encodeToString(byteArray42);
        byte[] byteArray48 = base64_8.decode("RFFvPQ0K\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[13, 10]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(base64_29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 8L + "'", long45 == 8L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str46, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[68, 81, 111, 61, 13, 10]");
    }

    @Test
    public void test578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test578");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        boolean boolean2 = base64_1.isUrlSafe();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test579");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray12);
        org.apache.commons.codec.binary.Base64.Builder builder14 = builder6.setEncodeTable(byteArray12);
        org.apache.commons.codec.binary.Base64.Builder builder16 = builder6.setLineLength((int) (byte) -1);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) '#');
        long long24 = base64_17.getEncodedLength(byteArray19);
        boolean boolean25 = base64_17.isUrlSafe();
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, true, (int) '#');
        byte[] byteArray32 = base64_17.encode(byteArray31);
        org.apache.commons.codec.binary.Base64.Builder builder33 = builder6.setEncodeTable(byteArray31);
        org.apache.commons.codec.binary.Base64.Builder builder35 = builder33.setUrlSafe(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4L + "'", long24 == 4L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test580");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        String str29 = base64_21.encodeToString(byteArray28);
        String str30 = base64_20.encodeAsString(byteArray28);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray38);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false);
        boolean boolean47 = base64_39.isInAlphabet(byteArray45, true);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray45);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, false);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = base64_20.encode(byteArray54);
        Object obj57 = base64_8.encode((Object) byteArray56);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64(10, byteArray65);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true);
        String str69 = base64_8.encodeAsString(byteArray65);
        byte[] byteArray70 = new byte[] {};
        String str71 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray70);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70, false, true, (int) (short) -1);
        java.math.BigInteger bigInteger76 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        byte[] byteArray77 = base64_8.encode(byteArray70);
        boolean boolean78 = base64_8.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/woK" + "'", str29, "/woK");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[65, 81, 111, 75, 47, 47, 56, 75, 13, 10]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "AQoK//8K\001\n\n\ufffd\ufffd\n" + "'", str69, "AQoK//8K\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test581");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray9);
        String str11 = base64_3.encodeToString(byteArray10);
        String str12 = base64_2.encodeAsString(byteArray10);
        byte[] byteArray13 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray15 = base64_2.decode(byteArray13);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        String str19 = base64_1.encodeToString(byteArray18);
        byte[] byteArray21 = base64_1.decode("DQo=\000\n\n\n\n\001");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/woK" + "'", str12, "/woK");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[68, 81, 111]");
    }

    @Test
    public void test582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test582");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, true);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        String str30 = base64_8.encodeAsString(byteArray23);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray38);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false);
        boolean boolean47 = base64_39.isInAlphabet(byteArray45, true);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray50 = base64_39.decode(byteArray49);
        String str51 = base64_8.encodeAsString(byteArray50);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false, (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str30, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
    }

    @Test
    public void test583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test583");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        String str8 = base64_0.encodeToString(byteArray7);
        boolean boolean10 = base64_0.isInAlphabet("L3dvSw==\001\n\n\ufffd\ufffd\n");
        boolean boolean11 = base64_0.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray19);
        String str21 = base64_13.encodeToString(byteArray20);
        String str22 = base64_12.encodeAsString(byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_12.decode(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray33);
        String str35 = base64_27.encodeToString(byteArray34);
        String str36 = base64_26.encodeAsString(byteArray34);
        byte[] byteArray37 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        String str39 = base64_26.encodeToString(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray44 = base64_26.encode(byteArray41, 1, 0);
        String str45 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray44);
        String str46 = base64_12.encodeToString(byteArray44);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, (int) (byte) 0);
        String str51 = base64_0.encodeAsString(byteArray44);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/woK" + "'", str35, "/woK");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "/woK" + "'", str36, "/woK");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DQo" + "'", str38, "DQo");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DQo=" + "'", str39, "DQo=");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
    }

    @Test
    public void test584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test584");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64(10, byteArray10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [TDNkdlN3PT0=??]");
        } catch (IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test585");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean11 = base64_0.isStrictDecoding();
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false);
        String str18 = base64_0.encodeToString(byteArray15);
        org.apache.commons.codec.CodecPolicy codecPolicy19 = base64_0.getCodecPolicy();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[47, 119, 111, 75]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/woK" + "'", str18, "/woK");
        org.junit.Assert.assertTrue("'" + codecPolicy19 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy19.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test586");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder8.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray18);
        String str20 = base64_12.encodeToString(byteArray19);
        String str21 = base64_11.encodeAsString(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray24 = base64_11.decode(byteArray22);
        org.apache.commons.codec.binary.Base64.Builder builder25 = builder8.setEncodeTable(byteArray22);
        org.apache.commons.codec.binary.Base64.Builder builder27 = builder25.setUrlSafe(true);
        org.apache.commons.codec.binary.Base64.Builder builder29 = builder27.setUrlSafe(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/woK" + "'", str20, "/woK");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test587");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        String str9 = base64_1.encodeToString(byteArray8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isBase64(byteArray8);
        boolean boolean11 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        org.apache.commons.codec.binary.Base64.Builder builder13 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy14 = null;
        org.apache.commons.codec.binary.Base64.Builder builder15 = builder13.setDecodingPolicy(codecPolicy14);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder22 = builder15.setLineSeparator(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23);
        org.apache.commons.codec.binary.Base64.Builder builder26 = builder15.setEncodeTable(byteArray23);
        org.apache.commons.codec.binary.Base64.Builder builder28 = builder26.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        String str38 = base64_30.encodeToString(byteArray37);
        String str39 = base64_29.encodeAsString(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        String str42 = base64_29.encodeToString(byteArray40);
        boolean boolean43 = base64_29.isStrictDecoding();
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray48 = base64_29.encode(byteArray45, (int) 'a', (int) (byte) 100);
        org.apache.commons.codec.CodecPolicy codecPolicy49 = base64_29.getCodecPolicy();
        org.apache.commons.codec.binary.Base64.Builder builder50 = builder28.setDecodingPolicy(codecPolicy49);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray8, true, codecPolicy49);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DQo" + "'", str24, "DQo");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "/woK" + "'", str38, "/woK");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "/woK" + "'", str39, "/woK");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DQo" + "'", str41, "DQo");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DQo=" + "'", str42, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + codecPolicy49 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy49.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test588");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        boolean boolean19 = base64_8.isStrictDecoding();
        boolean boolean20 = base64_8.isStrictDecoding();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64(10, byteArray28);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false);
        boolean boolean37 = base64_29.isInAlphabet(byteArray35, true);
        byte[] byteArray39 = base64_29.decode("/woK");
        byte[] byteArray40 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        boolean boolean44 = base64_29.isInAlphabet(byteArray42, true);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false, (int) ' ');
        byte[] byteArray49 = base64_8.encode(byteArray42);
        String str50 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray42);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false);
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DQo" + "'", str41, "DQo");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(bigInteger54);
    }

    @Test
    public void test589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test589");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        byte[] byteArray19 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray19);
        boolean boolean23 = base64_8.isInAlphabet(byteArray21, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        String str27 = base64_8.encodeAsString(byteArray26);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64(10, byteArray35);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false);
        boolean boolean44 = base64_36.isInAlphabet(byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray47 = base64_36.decode(byteArray46);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, true);
        long long51 = base64_8.getEncodedLength(byteArray46);
        Class<?> wildcardClass52 = base64_8.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo" + "'", str20, "DQo");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo" + "'", str25, "DQo");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str27, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 14L + "'", long51 == 14L);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test590");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder11 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy12 = null;
        org.apache.commons.codec.binary.Base64.Builder builder13 = builder11.setDecodingPolicy(codecPolicy12);
        org.apache.commons.codec.binary.Base64.Builder builder15 = builder13.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder17 = builder13.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_18 = builder13.get();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) 100 };
        byte[] byteArray23 = base64_18.encode(byteArray22);
        boolean boolean25 = base64_18.isInAlphabet("AQoK//8K\001\n\n\ufffd\ufffd\n");
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64(10, byteArray35);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false);
        boolean boolean44 = base64_36.isInAlphabet(byteArray42, true);
        byte[] byteArray46 = base64_36.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((-1), byteArray46);
        boolean boolean48 = base64_47.isUrlSafe();
        byte[] byteArray50 = base64_47.decode("AQoK//8K\001\n\n\ufffd\ufffd\n");
        boolean boolean51 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray50);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray58 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray60);
        String str62 = base64_54.encodeToString(byteArray61);
        String str63 = base64_53.encodeAsString(byteArray61);
        byte[] byteArray64 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray64);
        byte[] byteArray66 = base64_53.decode(byteArray64);
        org.apache.commons.codec.binary.Base64 base64_67 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray72 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, false);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray74);
        String str76 = base64_68.encodeToString(byteArray75);
        String str77 = base64_67.encodeAsString(byteArray75);
        byte[] byteArray78 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str79 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray78);
        String str80 = base64_67.encodeToString(byteArray78);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray85 = base64_67.encode(byteArray82, 1, 0);
        String str86 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray85);
        String str87 = base64_53.encodeToString(byteArray85);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85, false, false, (int) (byte) 0);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray91);
        byte[] byteArray93 = base64_52.decode(byteArray92);
        byte[] byteArray96 = base64_18.encode(byteArray93, 10, (int) (byte) 10);
        org.apache.commons.codec.binary.Base64.Builder builder97 = builder10.setLineSeparator(byteArray93);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(base64_18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 10, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[65, 81, 112, 107]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "/woK" + "'", str62, "/woK");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "/woK" + "'", str63, "/woK");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "/woK" + "'", str76, "/woK");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "/woK" + "'", str77, "/woK");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "DQo" + "'", str79, "DQo");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "DQo=" + "'", str80, "DQo=");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[]");
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test591");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, true, false);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12);
        byte[] byteArray14 = base64_1.encode(byteArray13);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test592");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        String str10 = base64_2.encodeToString(byteArray9);
        String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        byte[] byteArray14 = base64_1.decode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray12);
        boolean boolean16 = base64_15.isUrlSafe();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64(10, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        byte[] byteArray27 = base64_15.decode(byteArray24);
        byte[] byteArray28 = null;
        byte[] byteArray29 = base64_15.decode(byteArray28);
        byte[] byteArray30 = null;
        String str31 = base64_15.encodeToString(byteArray30);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test593");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray19);
        boolean boolean22 = base64_20.isInAlphabet("/woK");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test594");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray14);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true, false);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray23);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test595");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray19);
        boolean boolean21 = base64_20.isUrlSafe();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(10, byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true);
        String str33 = base64_20.encodeToString(byteArray32);
        Object obj34 = null;
        // The following exception was thrown during execution in test generation
        try {
            Object obj35 = base64_20.decode(obj34);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[65, 81, 111, 75, 47, 47, 56, 75, 13, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "QVFvSy8vOEsNCg==" + "'", str33, "QVFvSy8vOEsNCg==");
    }

    @Test
    public void test596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test596");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder8.setUrlSafe(false);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64(10, byteArray18);
        byte[] byteArray20 = null;
        byte[] byteArray23 = base64_19.encode(byteArray20, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        String str32 = base64_24.encodeToString(byteArray31);
        byte[] byteArray33 = base64_19.encode(byteArray31);
        String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        org.apache.commons.codec.binary.Base64.Builder builder35 = builder8.setLineSeparator(byteArray31);
        org.apache.commons.codec.binary.Base64.Builder builder37 = builder35.setUrlSafe(true);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64(10, byteArray45);
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false);
        boolean boolean54 = base64_46.isInAlphabet(byteArray52, true);
        org.apache.commons.codec.CodecPolicy codecPolicy55 = base64_46.getCodecPolicy();
        org.apache.commons.codec.binary.Base64.Builder builder56 = builder37.setDecodingPolicy(codecPolicy55);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "/woK" + "'", str32, "/woK");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "_woK" + "'", str34, "_woK");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + codecPolicy55 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy55.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test597");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        String str10 = base64_2.encodeToString(byteArray9);
        String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        String str14 = base64_1.encodeToString(byteArray12);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray19 = base64_1.encode(byteArray16, 1, 0);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, true);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray19);
        byte[] byteArray25 = base64_23.decode("VEROa2RsTjNQVDBOQ2c9PQ==");
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray32);
        String str34 = base64_26.encodeToString(byteArray33);
        boolean boolean36 = base64_26.isInAlphabet("L3dvSw==\001\n\n\ufffd\ufffd\n");
        boolean boolean37 = base64_26.isUrlSafe();
        byte[] byteArray39 = base64_26.decode("UkZGdkRRbz0=");
        String str40 = base64_23.encodeAsString(byteArray39);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo" + "'", str13, "DQo");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DQo=" + "'", str14, "DQo=");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "/woK" + "'", str34, "/woK");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UkZGdkRRbz0=" + "'", str40, "UkZGdkRRbz0=");
    }

    @Test
    public void test598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test598");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray12);
        org.apache.commons.codec.binary.Base64.Builder builder14 = builder6.setEncodeTable(byteArray12);
        org.apache.commons.codec.binary.Base64.Builder builder16 = builder14.setLineLength((int) (byte) 100);
        org.apache.commons.codec.binary.Base64.Builder builder18 = builder14.setLineLength((int) (byte) 0);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        String str31 = base64_23.encodeToString(byteArray30);
        String str32 = base64_22.encodeAsString(byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray33);
        byte[] byteArray35 = base64_22.decode(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray33);
        boolean boolean37 = base64_36.isUrlSafe();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64(10, byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray45);
        byte[] byteArray48 = base64_36.decode(byteArray45);
        String str49 = base64_20.encodeToString(byteArray45);
        boolean boolean50 = base64_20.isUrlSafe();
        org.apache.commons.codec.CodecPolicy codecPolicy51 = base64_20.getCodecPolicy();
        org.apache.commons.codec.binary.Base64.Builder builder52 = builder14.setDecodingPolicy(codecPolicy51);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/woK" + "'", str31, "/woK");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "/woK" + "'", str32, "/woK");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "AQoK__8K\r\n" + "'", str49, "AQoK__8K\r\n");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + codecPolicy51 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy51.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test599");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("RFFvPQ==\001\n\n\ufffd\ufffd\n");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[82, 70, 70, 118, 80, 81]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[85, 107, 90, 71, 100, 108, 66, 82, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[86, 87, 116, 97, 82, 50, 82, 115, 81, 108, 73, 78, 67, 103, 61, 61]");
    }

    @Test
    public void test600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test600");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-122]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[104, 103]");
    }

    @Test
    public void test601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test601");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("TDNkdlN3");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[76, 51, 100, 118, 83, 119]");
    }

    @Test
    public void test602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test602");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, true);
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(bigInteger21);
    }

    @Test
    public void test603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test603");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        boolean boolean8 = base64_0.isUrlSafe();
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) '#');
        byte[] byteArray15 = base64_0.encode(byteArray14);
        boolean boolean17 = base64_0.isInAlphabet("TDNkdlN3\r\n");
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        String str26 = base64_18.encodeToString(byteArray25);
        byte[] byteArray28 = base64_18.decode("");
        boolean boolean30 = base64_18.isInAlphabet("AQoK//8K");
        byte[] byteArray31 = null;
        String str32 = base64_18.encodeToString(byteArray31);
        boolean boolean34 = base64_18.isInAlphabet("TDNkdlN3\r\n");
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64(10, byteArray42);
        byte[] byteArray44 = null;
        byte[] byteArray47 = base64_43.encode(byteArray44, 100, 76);
        boolean boolean48 = base64_43.isStrictDecoding();
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, true, true, (int) '#');
        long long56 = base64_49.getEncodedLength(byteArray51);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64(10, byteArray64);
        byte[] byteArray69 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, false);
        boolean boolean73 = base64_65.isInAlphabet(byteArray71, true);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray71, true, false);
        byte[] byteArray77 = base64_49.encode(byteArray71);
        String str78 = base64_43.encodeToString(byteArray77);
        org.apache.commons.codec.binary.Base64.Builder builder79 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy80 = null;
        org.apache.commons.codec.binary.Base64.Builder builder81 = builder79.setDecodingPolicy(codecPolicy80);
        org.apache.commons.codec.binary.Base64.Builder builder83 = builder81.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder85 = builder81.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_86 = builder81.get();
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.decodeBase64("AQoK//8K");
        org.apache.commons.codec.binary.Base64.Builder builder89 = builder81.setEncodeTable(byteArray88);
        byte[] byteArray90 = base64_43.encode(byteArray88);
        byte[] byteArray91 = base64_18.decode(byteArray88);
        Object obj92 = base64_0.decode((Object) byteArray91);
        boolean boolean94 = base64_0.isInAlphabet("TDNkdlN3PT0");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "/woK" + "'", str26, "/woK");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 4L + "'", long56 == 4L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str78, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(base64_86);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[65, 81, 111, 75, 47, 47, 56, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test604");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder2.setUrlSafe(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray28 = base64_17.decode(byteArray27);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        org.apache.commons.codec.binary.Base64.Builder builder32 = builder2.setEncodeTable(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy35 = base64_34.getCodecPolicy();
        org.apache.commons.codec.binary.Base64.Builder builder36 = builder2.setDecodingPolicy(codecPolicy35);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray45);
        String str47 = base64_39.encodeToString(byteArray46);
        String str48 = base64_38.encodeAsString(byteArray46);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64(10, byteArray57);
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false);
        boolean boolean66 = base64_58.isInAlphabet(byteArray64, true);
        org.apache.commons.codec.CodecPolicy codecPolicy67 = base64_58.getCodecPolicy();
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray46, false, codecPolicy67);
        org.apache.commons.codec.binary.Base64.Builder builder69 = builder2.setEncodeTable(byteArray46);
        org.apache.commons.codec.binary.Base64.Builder builder71 = builder69.setLineLength((int) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + codecPolicy35 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy35.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/woK" + "'", str47, "/woK");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "/woK" + "'", str48, "/woK");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + codecPolicy67 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy67.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test605");
        byte[] byteArray0 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray0);
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray0);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[82, 70, 70, 118]");
    }

    @Test
    public void test606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test606");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, true);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray11, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test607");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[68, 81, 111]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DQo" + "'", str5, "DQo");
    }

    @Test
    public void test608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test608");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder8.setUrlSafe(false);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64(10, byteArray18);
        byte[] byteArray20 = null;
        byte[] byteArray23 = base64_19.encode(byteArray20, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        String str32 = base64_24.encodeToString(byteArray31);
        byte[] byteArray33 = base64_19.encode(byteArray31);
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        org.apache.commons.codec.binary.Base64.Builder builder35 = builder8.setLineSeparator(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_36 = builder35.get();
        org.apache.commons.codec.CodecPolicy codecPolicy37 = base64_36.getCodecPolicy();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "/woK" + "'", str32, "/woK");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "_woK" + "'", str34, "_woK");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(base64_36);
        org.junit.Assert.assertTrue("'" + codecPolicy37 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy37.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test609");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder6.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder8.setLineLength((int) (byte) -1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test610");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(100);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        byte[] byteArray9 = base64_1.decode(byteArray8);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test611");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(false);
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false);
        boolean boolean18 = base64_10.isInAlphabet(byteArray16, true);
        byte[] byteArray20 = base64_10.decode("DQo");
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray21);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, true, (int) (short) -1);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray28 = base64_10.decode(byteArray21);
        boolean boolean29 = org.apache.commons.codec.binary.Base64.isBase64(byteArray21);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true);
        byte[] byteArray35 = base64_1.decode(byteArray34);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
    }

    @Test
    public void test612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test612");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str29 = base64_21.encodeToString(byteArray28);
        java.lang.String str30 = base64_20.encodeAsString(byteArray28);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray38);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false);
        boolean boolean47 = base64_39.isInAlphabet(byteArray45, true);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray45);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, false);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = base64_20.encode(byteArray54);
        java.lang.Object obj57 = base64_8.encode((java.lang.Object) byteArray56);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray63);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63);
        java.lang.String str66 = base64_8.encodeAsString(byteArray63);
        byte[] byteArray67 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray67);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray67);
        byte[] byteArray70 = base64_8.decode(byteArray69);
        boolean boolean71 = base64_8.isStrictDecoding();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/woK" + "'", str29, "/woK");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str66, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DQo" + "'", str68, "DQo");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test613");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray20 = base64_9.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        java.lang.String str25 = base64_21.encodeToString(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        byte[] byteArray28 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28);
        byte[] byteArray31 = base64_27.encode(byteArray30);
        boolean boolean33 = base64_21.isInAlphabet(byteArray30, false);
        boolean boolean34 = base64_21.isStrictDecoding();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo=\000\n\n\n\n\001" + "'", str25, "DQo=\000\n\n\n\n\001");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DQo" + "'", str29, "DQo");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test614");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setLineLength(0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(10, byteArray12);
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false);
        boolean boolean21 = base64_13.isInAlphabet(byteArray19, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, true);
        boolean boolean25 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isBase64(byteArray19);
        org.apache.commons.codec.binary.Base64.Builder builder27 = builder2.setEncodeTable(byteArray19);
        org.apache.commons.codec.binary.Base64.Builder builder29 = builder27.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder30 = org.apache.commons.codec.binary.Base64.builder();
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder37 = builder30.setLineSeparator(byteArray36);
        org.apache.commons.codec.CodecPolicy codecPolicy38 = null;
        org.apache.commons.codec.binary.Base64.Builder builder39 = builder37.setDecodingPolicy(codecPolicy38);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64(10, byteArray48);
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false);
        boolean boolean57 = base64_49.isInAlphabet(byteArray55, true);
        byte[] byteArray59 = base64_49.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64((-1), byteArray59);
        org.apache.commons.codec.CodecPolicy codecPolicy61 = base64_60.getCodecPolicy();
        org.apache.commons.codec.binary.Base64.Builder builder62 = builder37.setDecodingPolicy(codecPolicy61);
        org.apache.commons.codec.binary.Base64.Builder builder63 = builder29.setDecodingPolicy(codecPolicy61);
        org.apache.commons.codec.binary.Base64 base64_64 = builder63.get();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[13, 10]");
        org.junit.Assert.assertTrue("'" + codecPolicy61 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy61.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(base64_64);
    }

    @Test
    public void test615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test615");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(10, byteArray8);
        byte[] byteArray10 = null;
        byte[] byteArray13 = base64_9.encode(byteArray10, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        java.lang.String str23 = base64_15.encodeToString(byteArray22);
        java.lang.String str24 = base64_14.encodeAsString(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        java.lang.String str27 = base64_14.encodeToString(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray32 = base64_14.encode(byteArray29, 1, 0);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        java.lang.String str37 = base64_9.encodeToString(byteArray32);
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64(10, byteArray48);
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false);
        boolean boolean57 = base64_49.isInAlphabet(byteArray55, true);
        byte[] byteArray59 = base64_49.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64((-1), byteArray59);
        org.apache.commons.codec.CodecPolicy codecPolicy61 = base64_60.getCodecPolicy();
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64(76, byteArray32, false, codecPolicy61);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "/woK" + "'", str23, "/woK");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "/woK" + "'", str24, "/woK");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DQo" + "'", str26, "DQo");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DQo=" + "'", str27, "DQo=");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[13, 10]");
        org.junit.Assert.assertTrue("'" + codecPolicy61 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy61.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test616");
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false);
        boolean boolean18 = base64_10.isInAlphabet(byteArray16, true);
        byte[] byteArray20 = base64_10.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((-1), byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        java.lang.String str31 = base64_23.encodeToString(byteArray30);
        java.lang.String str32 = base64_22.encodeAsString(byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str35 = base64_22.encodeToString(byteArray33);
        byte[] byteArray38 = base64_21.encode(byteArray33, (int) (short) 100, 0);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray46);
        java.lang.String str48 = base64_40.encodeToString(byteArray47);
        java.lang.String str49 = base64_39.encodeAsString(byteArray47);
        byte[] byteArray50 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        byte[] byteArray52 = base64_39.decode(byteArray50);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53);
        long long55 = base64_21.getEncodedLength(byteArray53);
        boolean boolean56 = base64_21.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray64);
        java.lang.String str66 = base64_58.encodeToString(byteArray65);
        java.lang.String str67 = base64_57.encodeAsString(byteArray65);
        byte[] byteArray68 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray68);
        byte[] byteArray70 = base64_57.decode(byteArray68);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray70);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray71);
        java.lang.String str73 = base64_21.encodeAsString(byteArray71);
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray71, false);
        boolean boolean76 = base64_75.isStrictDecoding();
        java.lang.Object obj77 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj78 = base64_75.encode(obj77);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/woK" + "'", str31, "/woK");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "/woK" + "'", str32, "/woK");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DQo" + "'", str34, "DQo");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DQo=" + "'", str35, "DQo=");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "/woK" + "'", str48, "/woK");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "/woK" + "'", str49, "/woK");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "/woK" + "'", str66, "/woK");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "/woK" + "'", str67, "/woK");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test617");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, true);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, true, false, (int) (byte) 100);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, true);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray21);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test618");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_7 = builder2.get();
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64("AQoK//8K");
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder2.setEncodeTable(byteArray9);
        org.apache.commons.codec.binary.Base64.Builder builder11 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy12 = null;
        org.apache.commons.codec.binary.Base64.Builder builder13 = builder11.setDecodingPolicy(codecPolicy12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        java.lang.String str24 = base64_16.encodeToString(byteArray23);
        java.lang.String str25 = base64_15.encodeAsString(byteArray23);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64(10, byteArray34);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false);
        boolean boolean43 = base64_35.isInAlphabet(byteArray41, true);
        org.apache.commons.codec.CodecPolicy codecPolicy44 = base64_35.getCodecPolicy();
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray23, false, codecPolicy44);
        org.apache.commons.codec.binary.Base64.Builder builder46 = builder11.setDecodingPolicy(codecPolicy44);
        org.apache.commons.codec.binary.Base64.Builder builder47 = builder2.setDecodingPolicy(codecPolicy44);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "/woK" + "'", str24, "/woK");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "/woK" + "'", str25, "/woK");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + codecPolicy44 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy44.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test619");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray18 = base64_0.encode(byteArray15, 1, 0);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false);
        long long25 = base64_0.getEncodedLength(byteArray24);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64(10, byteArray34);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false);
        boolean boolean43 = base64_35.isInAlphabet(byteArray41, true);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray46 = base64_35.decode(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray45);
        byte[] byteArray48 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        java.lang.String str51 = base64_47.encodeToString(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        byte[] byteArray54 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54);
        byte[] byteArray57 = base64_53.encode(byteArray56);
        boolean boolean59 = base64_47.isInAlphabet(byteArray56, false);
        java.lang.String str60 = base64_0.encodeAsString(byteArray56);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray56);
        boolean boolean62 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray56);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 8L + "'", long25 == 8L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DQo=\000\n\n\n\n\001" + "'", str51, "DQo=\000\n\n\n\n\001");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DQo" + "'", str55, "DQo");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "RFFvPQ==" + "'", str60, "RFFvPQ==");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test620");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder6.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder6.setLineLength(0);
        org.apache.commons.codec.binary.Base64.Builder builder12 = builder6.setPadding((byte) 1);
        org.apache.commons.codec.binary.Base64.Builder builder14 = builder12.setLineLength((int) (short) 100);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21);
        org.apache.commons.codec.binary.Base64.Builder builder24 = builder12.setEncodeTable(byteArray21);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AAoKCgoB" + "'", str22, "AAoKCgoB");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test621");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray12);
        org.apache.commons.codec.binary.Base64.Builder builder14 = builder6.setEncodeTable(byteArray12);
        org.apache.commons.codec.binary.Base64.Builder builder16 = builder14.setLineLength((int) (byte) 100);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64(10, byteArray26);
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false);
        boolean boolean35 = base64_27.isInAlphabet(byteArray33, true);
        byte[] byteArray37 = base64_27.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((-1), byteArray37);
        boolean boolean39 = base64_38.isUrlSafe();
        byte[] byteArray41 = base64_38.decode("AQoK//8K\001\n\n\ufffd\ufffd\n");
        boolean boolean42 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray41);
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49);
        boolean boolean52 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray51);
        byte[] byteArray53 = base64_43.decode(byteArray51);
        org.apache.commons.codec.binary.Base64.Builder builder54 = builder16.setLineSeparator(byteArray53);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test622");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = base64_13.encodeToString(byteArray20);
        byte[] byteArray22 = base64_8.encode(byteArray20);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64(10, byteArray30);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        boolean boolean39 = base64_31.isInAlphabet(byteArray37, true);
        byte[] byteArray41 = base64_31.decode("/woK");
        byte[] byteArray42 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray42);
        boolean boolean46 = base64_31.isInAlphabet(byteArray44, true);
        byte[] byteArray47 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47);
        java.lang.String str50 = base64_31.encodeAsString(byteArray49);
        boolean boolean52 = base64_8.isInAlphabet(byteArray49, true);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false);
        java.lang.String str56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DQo" + "'", str43, "DQo");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "DQo" + "'", str48, "DQo");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str50, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[82, 70, 70, 118, 80, 81, 61, 61]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UkZGdlBRPT0" + "'", str56, "UkZGdlBRPT0");
    }

    @Test
    public void test623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test623");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder8.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray17);
        java.lang.String str19 = base64_11.encodeToString(byteArray18);
        byte[] byteArray21 = base64_11.decode("");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21);
        boolean boolean23 = org.apache.commons.codec.binary.Base64.isBase64(byteArray21);
        org.apache.commons.codec.binary.Base64.Builder builder24 = builder10.setLineSeparator(byteArray21);
        org.apache.commons.codec.binary.Base64.Builder builder26 = builder24.setLineLength(100);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64(10, byteArray34);
        byte[] byteArray36 = null;
        byte[] byteArray39 = base64_35.encode(byteArray36, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray46);
        java.lang.String str48 = base64_40.encodeToString(byteArray47);
        byte[] byteArray49 = base64_35.encode(byteArray47);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        org.apache.commons.codec.binary.Base64.Builder builder52 = builder24.setLineSeparator(byteArray49);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/woK" + "'", str19, "/woK");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "/woK" + "'", str48, "/woK");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[76, 51, 100, 118, 83, 119, 69, 75, 67, 118, 47, 47, 67, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test624");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, true, true, (int) '#');
        long long21 = base64_14.getEncodedLength(byteArray16);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true, false);
        byte[] byteArray42 = base64_14.encode(byteArray36);
        java.lang.String str43 = base64_8.encodeToString(byteArray42);
        org.apache.commons.codec.binary.Base64.Builder builder44 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy45 = null;
        org.apache.commons.codec.binary.Base64.Builder builder46 = builder44.setDecodingPolicy(codecPolicy45);
        org.apache.commons.codec.binary.Base64.Builder builder48 = builder46.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy49 = null;
        org.apache.commons.codec.binary.Base64.Builder builder50 = builder46.setDecodingPolicy(codecPolicy49);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = null;
        org.apache.commons.codec.binary.Base64.Builder builder52 = builder46.setDecodingPolicy(codecPolicy51);
        org.apache.commons.codec.binary.Base64.Builder builder54 = builder52.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray62);
        java.lang.String str64 = base64_56.encodeToString(byteArray63);
        java.lang.String str65 = base64_55.encodeAsString(byteArray63);
        byte[] byteArray66 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray68 = base64_55.decode(byteArray66);
        org.apache.commons.codec.binary.Base64.Builder builder69 = builder52.setEncodeTable(byteArray66);
        boolean boolean71 = base64_8.isInAlphabet(byteArray66, false);
        boolean boolean72 = base64_8.isUrlSafe();
        org.apache.commons.codec.CodecPolicy codecPolicy73 = base64_8.getCodecPolicy();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_82 = new org.apache.commons.codec.binary.Base64(10, byteArray81);
        byte[] byteArray86 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86, false);
        boolean boolean90 = base64_82.isInAlphabet(byteArray88, true);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray88, true);
        boolean boolean93 = org.apache.commons.codec.binary.Base64.isBase64(byteArray88);
        java.lang.String str94 = base64_8.encodeToString(byteArray88);
        byte[] byteArray96 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray88, true);
        byte[] byteArray99 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray88, true, true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str43, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "/woK" + "'", str64, "/woK");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "/woK" + "'", str65, "/woK");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy73 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy73.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str94, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray99), "[76, 51, 100, 118, 83, 119, 13, 10]");
    }

    @Test
    public void test625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test625");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(false);
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, true, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray4, false);
        java.lang.String str12 = base64_2.encodeAsString(byteArray4);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, true, (-1));
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64(1, byteArray4, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test626");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray12);
        org.apache.commons.codec.binary.Base64.Builder builder14 = builder6.setEncodeTable(byteArray12);
        org.apache.commons.codec.binary.Base64.Builder builder16 = builder14.setLineLength((int) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test627");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        boolean boolean14 = base64_0.isStrictDecoding();
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray19 = base64_0.encode(byteArray16, (int) 'a', (int) (byte) 100);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        boolean boolean23 = org.apache.commons.codec.binary.Base64.isBase64(byteArray22);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test628");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder7 = builder0.setLineSeparator(byteArray6);
        org.apache.commons.codec.binary.Base64.Builder builder9 = builder7.setUrlSafe(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test629");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray19);
        boolean boolean21 = base64_20.isStrictDecoding();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray31 = base64_20.encode(byteArray28);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 119, 111, 75]");
    }

    @Test
    public void test630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test630");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 1);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        byte[] byteArray12 = base64_2.decode("");
        boolean boolean14 = base64_2.isInAlphabet("AQoK//8K");
        byte[] byteArray15 = null;
        java.lang.String str16 = base64_2.encodeToString(byteArray15);
        boolean boolean18 = base64_2.isInAlphabet("TDNkdlN3\r\n");
        byte[] byteArray20 = base64_2.decode("AAoKCgoB");
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray21);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, true, (int) (short) -1);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        byte[] byteArray28 = base64_2.decode(byteArray21);
        java.lang.String str29 = base64_1.encodeAsString(byteArray28);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test631");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        byte[] byteArray2 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray5 = base64_1.encode(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isBase64(byteArray4);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DQo" + "'", str3, "DQo");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test632");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(100);
        boolean boolean3 = base64_1.isInAlphabet("QUFvS0Nnb0I=");
        boolean boolean4 = base64_1.isStrictDecoding();
        boolean boolean5 = base64_1.isStrictDecoding();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test633");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.Base64 base64_7 = builder2.get();
        org.apache.commons.codec.binary.Base64.Builder builder9 = builder2.setUrlSafe(true);
        org.apache.commons.codec.binary.Base64.Builder builder11 = builder2.setPadding((byte) -1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test634");
        boolean boolean1 = org.apache.commons.codec.binary.Base64.isBase64("TDNkdlN3\r\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test635");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3, false);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(10, byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false);
        boolean boolean29 = base64_21.isInAlphabet(byteArray27, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray32 = base64_21.decode(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray31);
        byte[] byteArray34 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray34);
        java.lang.String str37 = base64_33.encodeToString(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        byte[] byteArray40 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40);
        byte[] byteArray43 = base64_39.encode(byteArray42);
        boolean boolean45 = base64_33.isInAlphabet(byteArray42, false);
        org.apache.commons.codec.CodecPolicy codecPolicy46 = base64_33.getCodecPolicy();
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray3, true, codecPolicy46);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DQo=\000\n\n\n\n\001" + "'", str37, "DQo=\000\n\n\n\n\001");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DQo" + "'", str41, "DQo");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy46 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy46.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test636");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        java.lang.String str22 = base64_14.encodeToString(byteArray21);
        byte[] byteArray23 = base64_0.decode(byteArray21);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(10, byteArray31);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, true);
        java.lang.Object obj35 = base64_0.encode((java.lang.Object) byteArray31);
        byte[] byteArray38 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray40);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray40, false);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        byte[] byteArray45 = base64_0.encode(byteArray40);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 81, 111, 75, 47, 47, 56, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DQo" + "'", str39, "DQo");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test637");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(10, byteArray14);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false);
        boolean boolean23 = base64_15.isInAlphabet(byteArray21, true);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, true, false);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        org.apache.commons.codec.binary.Base64.Builder builder32 = builder6.setEncodeTable(byteArray30);
        org.apache.commons.codec.binary.Base64.Builder builder34 = builder32.setPadding((byte) 10);
        org.apache.commons.codec.binary.Base64.Builder builder36 = builder32.setUrlSafe(true);
        org.apache.commons.codec.binary.Base64.Builder builder38 = builder36.setUrlSafe(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test638");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, true, true, (int) '#');
        long long21 = base64_14.getEncodedLength(byteArray16);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true, false);
        byte[] byteArray42 = base64_14.encode(byteArray36);
        java.lang.String str43 = base64_8.encodeToString(byteArray42);
        org.apache.commons.codec.binary.Base64.Builder builder44 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy45 = null;
        org.apache.commons.codec.binary.Base64.Builder builder46 = builder44.setDecodingPolicy(codecPolicy45);
        org.apache.commons.codec.binary.Base64.Builder builder48 = builder46.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy49 = null;
        org.apache.commons.codec.binary.Base64.Builder builder50 = builder46.setDecodingPolicy(codecPolicy49);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = null;
        org.apache.commons.codec.binary.Base64.Builder builder52 = builder46.setDecodingPolicy(codecPolicy51);
        org.apache.commons.codec.binary.Base64.Builder builder54 = builder52.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray62);
        java.lang.String str64 = base64_56.encodeToString(byteArray63);
        java.lang.String str65 = base64_55.encodeAsString(byteArray63);
        byte[] byteArray66 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray68 = base64_55.decode(byteArray66);
        org.apache.commons.codec.binary.Base64.Builder builder69 = builder52.setEncodeTable(byteArray66);
        boolean boolean71 = base64_8.isInAlphabet(byteArray66, false);
        boolean boolean72 = base64_8.isUrlSafe();
        org.apache.commons.codec.CodecPolicy codecPolicy73 = base64_8.getCodecPolicy();
        boolean boolean74 = base64_8.isStrictDecoding();
        byte[] byteArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean77 = base64_8.isInAlphabet(byteArray75, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"<local3>\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str43, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "/woK" + "'", str64, "/woK");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "/woK" + "'", str65, "/woK");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy73 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy73.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test639");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray20 = base64_9.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        java.lang.String str25 = base64_21.encodeToString(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, true, (int) ' ');
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo=\000\n\n\n\n\001" + "'", str25, "DQo=\000\n\n\n\n\001");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger31);
    }

    @Test
    public void test640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test640");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray12);
        org.apache.commons.codec.binary.Base64.Builder builder14 = builder6.setEncodeTable(byteArray12);
        org.apache.commons.codec.binary.Base64.Builder builder16 = builder14.setLineLength((int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.String str27 = base64_19.encodeToString(byteArray26);
        java.lang.String str28 = base64_18.encodeAsString(byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        java.lang.String str31 = base64_18.encodeToString(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray36 = base64_18.encode(byteArray33, 1, 0);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, true);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray36);
        org.apache.commons.codec.binary.Base64.Builder builder41 = builder14.setEncodeTable(byteArray36);
        byte[] byteArray43 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy49 = base64_48.getCodecPolicy();
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64(0, byteArray43, false, codecPolicy49);
        org.apache.commons.codec.binary.Base64.Builder builder51 = builder41.setLineSeparator(byteArray43);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "/woK" + "'", str27, "/woK");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "/woK" + "'", str28, "/woK");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DQo" + "'", str30, "DQo");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DQo=" + "'", str31, "DQo=");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DQo" + "'", str44, "DQo");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + codecPolicy49 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy49.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test641");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, true, (int) '#');
        long long8 = base64_1.getEncodedLength(byteArray3);
        boolean boolean9 = base64_1.isUrlSafe();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(10, byteArray17);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false);
        boolean boolean26 = base64_18.isInAlphabet(byteArray24, true);
        byte[] byteArray28 = base64_18.decode("/woK");
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, true, false);
        boolean boolean32 = org.apache.commons.codec.binary.Base64.isBase64(byteArray31);
        byte[] byteArray33 = base64_1.decode(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64(1, byteArray33, false);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray33);
        java.lang.Class<?> wildcardClass37 = byteArray33.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4L + "'", long8 == 4L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test642");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        byte[] byteArray11 = base64_1.decode("");
        boolean boolean13 = base64_1.isInAlphabet("AQoK//8K");
        byte[] byteArray14 = null;
        java.lang.String str15 = base64_1.encodeToString(byteArray14);
        boolean boolean17 = base64_1.isInAlphabet("TDNkdlN3\r\n");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(10, byteArray25);
        byte[] byteArray27 = null;
        byte[] byteArray30 = base64_26.encode(byteArray27, 100, 76);
        boolean boolean31 = base64_26.isStrictDecoding();
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, true, true, (int) '#');
        long long39 = base64_32.getEncodedLength(byteArray34);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64(10, byteArray47);
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false);
        boolean boolean56 = base64_48.isInAlphabet(byteArray54, true);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, true, false);
        byte[] byteArray60 = base64_32.encode(byteArray54);
        java.lang.String str61 = base64_26.encodeToString(byteArray60);
        org.apache.commons.codec.binary.Base64.Builder builder62 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy63 = null;
        org.apache.commons.codec.binary.Base64.Builder builder64 = builder62.setDecodingPolicy(codecPolicy63);
        org.apache.commons.codec.binary.Base64.Builder builder66 = builder64.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder68 = builder64.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_69 = builder64.get();
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.decodeBase64("AQoK//8K");
        org.apache.commons.codec.binary.Base64.Builder builder72 = builder64.setEncodeTable(byteArray71);
        byte[] byteArray73 = base64_26.encode(byteArray71);
        byte[] byteArray74 = base64_1.decode(byteArray71);
        java.math.BigInteger bigInteger75 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray74);
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray74);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4L + "'", long39 == 4L);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str61, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(base64_69);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[65, 81, 111, 75, 47, 47, 56, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(bigInteger75);
    }

    @Test
    public void test643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test643");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, 81, 111, 75, 47, 47, 56, 75]");
    }

    @Test
    public void test644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test644");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, true);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, false);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger32);
        boolean boolean36 = base64_0.isInAlphabet(byteArray34, true);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray44);
        java.lang.String str46 = base64_38.encodeToString(byteArray45);
        java.lang.String str47 = base64_37.encodeAsString(byteArray45);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64(10, byteArray55);
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false);
        boolean boolean64 = base64_56.isInAlphabet(byteArray62, true);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, true);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray62);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, true, false);
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray71);
        byte[] byteArray73 = base64_37.encode(byteArray71);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray73);
        boolean boolean76 = base64_0.isInAlphabet(byteArray74, true);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "/woK" + "'", str46, "/woK");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/woK" + "'", str47, "/woK");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[86, 69, 82, 79, 97, 50, 82, 115, 84, 106, 78, 81, 86, 68, 66, 79, 81, 50, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[86, 107, 86, 83, 84, 50, 69, 121, 85, 110, 78, 85, 97, 107, 53, 82, 86, 107, 82, 67, 84, 49, 69, 121, 89, 122, 108, 81, 85, 84, 48, 57, 68, 81, 111, 61]");
    }

    @Test
    public void test645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test645");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        boolean boolean10 = base64_0.isInAlphabet("L3dvSw==\001\n\n\ufffd\ufffd\n");
        boolean boolean11 = base64_0.isUrlSafe();
        byte[] byteArray13 = base64_0.decode("UkZGdkRRbz0=");
        byte[] byteArray15 = base64_0.decode("TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61]");
    }

    @Test
    public void test646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test646");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        byte[] byteArray13 = base64_0.decode(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        java.lang.String str23 = base64_15.encodeToString(byteArray22);
        java.lang.String str24 = base64_14.encodeAsString(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        java.lang.String str27 = base64_14.encodeToString(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray32 = base64_14.encode(byteArray29, 1, 0);
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray32);
        java.lang.String str34 = base64_0.encodeToString(byteArray32);
        boolean boolean35 = base64_0.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray44);
        java.lang.String str46 = base64_38.encodeToString(byteArray45);
        java.lang.String str47 = base64_37.encodeAsString(byteArray45);
        byte[] byteArray48 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        byte[] byteArray50 = base64_37.decode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray48);
        boolean boolean52 = base64_51.isUrlSafe();
        org.apache.commons.codec.CodecPolicy codecPolicy53 = base64_51.getCodecPolicy();
        boolean boolean54 = base64_51.isUrlSafe();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = base64_0.encode((java.lang.Object) boolean54);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "/woK" + "'", str23, "/woK");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "/woK" + "'", str24, "/woK");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DQo" + "'", str26, "DQo");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DQo=" + "'", str27, "DQo=");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "/woK" + "'", str46, "/woK");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/woK" + "'", str47, "/woK");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy53 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy53.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test647");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, true);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray2);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray2, false);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(10, byteArray17);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false);
        boolean boolean26 = base64_18.isInAlphabet(byteArray24, true);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        java.lang.Object obj31 = base64_9.decode((java.lang.Object) byteArray30);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(10, byteArray39);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64(10, byteArray48);
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false);
        boolean boolean57 = base64_49.isInAlphabet(byteArray55, true);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, false, true);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray55);
        java.lang.String str62 = base64_40.encodeAsString(byteArray55);
        boolean boolean64 = base64_9.isInAlphabet(byteArray55, true);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str62, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test648");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        java.lang.String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str14 = base64_1.encodeToString(byteArray12);
        boolean boolean15 = base64_1.isStrictDecoding();
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray20 = base64_1.encode(byteArray17, (int) 'a', (int) (byte) 100);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isBase64(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64(100, byteArray20, false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo" + "'", str13, "DQo");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DQo=" + "'", str14, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test649");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        byte[] byteArray19 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray19);
        boolean boolean23 = base64_8.isInAlphabet(byteArray21, true);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(10, byteArray31);
        byte[] byteArray33 = null;
        byte[] byteArray36 = base64_32.encode(byteArray33, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray43);
        java.lang.String str45 = base64_37.encodeToString(byteArray44);
        byte[] byteArray46 = base64_32.encode(byteArray44);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, true, 76);
        byte[] byteArray53 = base64_8.encode(byteArray52);
        boolean boolean54 = base64_8.isStrictDecoding();
        byte[] byteArray56 = base64_8.decode("DQo=");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo" + "'", str20, "DQo");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "/woK" + "'", str45, "/woK");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[76, 51, 100, 118, 83, 119, 69, 75, 67, 118, 47, 47, 67, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[76, 51, 100, 118, 83, 119, 69, 75, 67, 118, 95, 95, 67, 103]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[84, 68, 78, 107, 100, 108, 78, 51, 1, 10, 10, -1, -1, 10, 82, 85, 116, 68, 100, 108, 57, 102, 1, 10, 10, -1, -1, 10, 81, 50, 99, 61, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[13, 10]");
    }

    @Test
    public void test650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test650");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 61, 13, 10]");
    }

    @Test
    public void test651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test651");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        org.apache.commons.codec.binary.Base64.Builder builder11 = builder9.setLineLength(0);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = base64_13.encodeToString(byteArray20);
        java.lang.String str22 = base64_12.encodeAsString(byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        java.lang.String str25 = base64_12.encodeToString(byteArray23);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray32);
        java.lang.String str34 = base64_26.encodeToString(byteArray33);
        byte[] byteArray35 = base64_12.decode(byteArray33);
        org.apache.commons.codec.binary.Base64.Builder builder36 = builder9.setEncodeTable(byteArray35);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DQo" + "'", str24, "DQo");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo=" + "'", str25, "DQo=");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "/woK" + "'", str34, "/woK");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test652");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10);
        org.apache.commons.codec.binary.Base64.Builder builder13 = builder9.setLineSeparator(byteArray12);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64(10, byteArray21);
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false);
        boolean boolean30 = base64_22.isInAlphabet(byteArray28, true);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray33 = base64_22.decode(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true);
        org.apache.commons.codec.binary.Base64.Builder builder37 = builder13.setEncodeTable(byteArray36);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64(10, byteArray45);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64(10, byteArray54);
        byte[] byteArray59 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false);
        boolean boolean63 = base64_55.isInAlphabet(byteArray61, true);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, true);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray61);
        java.lang.String str68 = base64_46.encodeAsString(byteArray61);
        org.apache.commons.codec.CodecPolicy codecPolicy69 = base64_46.getCodecPolicy();
        org.apache.commons.codec.binary.Base64.Builder builder70 = builder37.setDecodingPolicy(codecPolicy69);
        org.apache.commons.codec.binary.Base64.Builder builder72 = builder37.setUrlSafe(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DQo" + "'", str11, "DQo");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str68, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + codecPolicy69 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy69.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test653");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray3 = null;
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder0.setEncodeTable(byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true);
        org.apache.commons.codec.binary.Base64.Builder builder9 = builder0.setEncodeTable(byteArray6);
        org.apache.commons.codec.binary.Base64.Builder builder11 = builder9.setPadding((byte) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test654");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder8.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder12 = builder10.setPadding((byte) -1);
        org.apache.commons.codec.binary.Base64.Builder builder14 = builder12.setUrlSafe(true);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray21);
        java.lang.String str23 = base64_15.encodeToString(byteArray22);
        byte[] byteArray25 = base64_15.decode("");
        boolean boolean27 = base64_15.isInAlphabet("AQoK//8K");
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        java.lang.String str36 = base64_28.encodeToString(byteArray35);
        byte[] byteArray38 = base64_28.decode("");
        boolean boolean40 = base64_28.isInAlphabet("AQoK//8K");
        byte[] byteArray41 = null;
        java.lang.String str42 = base64_28.encodeToString(byteArray41);
        boolean boolean44 = base64_28.isInAlphabet("TDNkdlN3\r\n");
        byte[] byteArray46 = base64_28.decode("AAoKCgoB");
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str54 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray53);
        byte[] byteArray55 = base64_28.encode(byteArray53);
        java.lang.Object obj56 = base64_15.decode((java.lang.Object) byteArray55);
        org.apache.commons.codec.binary.Base64.Builder builder57 = builder14.setEncodeTable(byteArray55);
        org.apache.commons.codec.binary.Base64.Builder builder59 = builder14.setPadding((byte) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "/woK" + "'", str23, "/woK");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "/woK" + "'", str36, "/woK");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "AAoKCgoB" + "'", str54, "AAoKCgoB");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test655");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        byte[] byteArray13 = base64_0.decode(byteArray11);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isBase64(byteArray13);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test656");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean12 = base64_0.isInAlphabet("AQoK//8K");
        byte[] byteArray13 = null;
        java.lang.String str14 = base64_0.encodeToString(byteArray13);
        boolean boolean16 = base64_0.isInAlphabet("TDNkdlN3\r\n");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64(10, byteArray24);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false);
        boolean boolean33 = base64_25.isInAlphabet(byteArray31, true);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray36 = base64_25.decode(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray42 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray44);
        java.lang.String str46 = base64_38.encodeToString(byteArray45);
        java.lang.String str47 = base64_37.encodeAsString(byteArray45);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64(10, byteArray55);
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false);
        boolean boolean64 = base64_56.isInAlphabet(byteArray62, true);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, true);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray62);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, true, false);
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray71);
        byte[] byteArray73 = base64_37.encode(byteArray71);
        java.lang.Object obj74 = base64_25.encode((java.lang.Object) byteArray73);
        java.lang.String str75 = base64_0.encodeToString(byteArray73);
        org.apache.commons.codec.binary.Base64.Builder builder76 = org.apache.commons.codec.binary.Base64.builder();
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder83 = builder76.setLineSeparator(byteArray82);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false);
        byte[] byteArray86 = base64_0.decode(byteArray85);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "/woK" + "'", str46, "/woK");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/woK" + "'", str47, "/woK");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "VEROa2RsTjNQVDBOQ2c9PQ==" + "'", str75, "VEROa2RsTjNQVDBOQ2c9PQ==");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[68, 81, 111, 13, 10]");
    }

    @Test
    public void test657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test657");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64(10, byteArray18);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false);
        boolean boolean27 = base64_19.isInAlphabet(byteArray25, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray36 = base64_0.encode(byteArray34);
        byte[] byteArray38 = base64_0.decode("L3dvSw0K");
        org.apache.commons.codec.CodecPolicy codecPolicy39 = base64_0.getCodecPolicy();
        byte[] byteArray41 = base64_0.decode("AQoK__8K");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + codecPolicy39 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy39.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10, 10, -1, -1, 10]");
    }

    @Test
    public void test658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test658");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("VEROa2RsTjMBCgr//wpSVXREZGw5ZgEKCv//ClEyYz0BCgr//wo=\r\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[84, 68, 78, 107, 100, 108, 78, 51, 1, 10, 10, -1, -1, 10, 82, 85, 116, 68, 100, 108, 57, 102, 1, 10, 10, -1, -1, 10, 81, 50, 99, 61, 1, 10, 10, -1, -1, 10]");
    }

    @Test
    public void test659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test659");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        byte[] byteArray13 = base64_0.decode(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test660");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.Base64 base64_7 = builder2.get();
        org.apache.commons.codec.binary.Base64 base64_8 = builder2.get();
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder2.setLineLength(64);
        org.apache.commons.codec.binary.Base64.Builder builder12 = builder2.setUrlSafe(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(base64_8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test661");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        boolean boolean14 = base64_0.isStrictDecoding();
        boolean boolean15 = base64_0.isStrictDecoding();
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, true, true, (int) '#');
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21);
        java.lang.Object obj23 = base64_0.encode((java.lang.Object) byteArray21);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, true, true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[82, 70, 70, 118, 68, 81, 111, 13, 10]");
    }

    @Test
    public void test662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test662");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(false);
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, true, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray4, false);
        java.lang.String str12 = base64_2.encodeAsString(byteArray4);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, true, (-1));
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray4, false);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test663");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setLineLength(0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(10, byteArray12);
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false);
        boolean boolean21 = base64_13.isInAlphabet(byteArray19, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, true);
        boolean boolean25 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isBase64(byteArray19);
        org.apache.commons.codec.binary.Base64.Builder builder27 = builder2.setEncodeTable(byteArray19);
        org.apache.commons.codec.binary.Base64.Builder builder29 = builder2.setUrlSafe(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test664");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder12 = builder2.setLineLength((int) (byte) 0);
        org.apache.commons.codec.binary.Base64.Builder builder14 = builder12.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder16 = builder12.setPadding((byte) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test665");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        java.lang.String str22 = base64_14.encodeToString(byteArray21);
        java.lang.String str23 = base64_13.encodeAsString(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        java.lang.String str26 = base64_13.encodeToString(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray31 = base64_13.encode(byteArray28, 1, 0);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, true);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray31);
        java.lang.String str36 = base64_8.encodeToString(byteArray31);
        boolean boolean37 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray45);
        java.lang.String str47 = base64_39.encodeToString(byteArray46);
        java.lang.String str48 = base64_38.encodeAsString(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        java.lang.String str51 = base64_38.encodeToString(byteArray49);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray56 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, false);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray58);
        java.lang.String str60 = base64_52.encodeToString(byteArray59);
        byte[] byteArray61 = base64_38.decode(byteArray59);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_70 = new org.apache.commons.codec.binary.Base64(10, byteArray69);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, true);
        java.lang.Object obj73 = base64_38.encode((java.lang.Object) byteArray69);
        byte[] byteArray74 = base64_8.decode(byteArray69);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, false, false, (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "/woK" + "'", str23, "/woK");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo" + "'", str25, "DQo");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DQo=" + "'", str26, "DQo=");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/woK" + "'", str47, "/woK");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "/woK" + "'", str48, "/woK");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DQo" + "'", str50, "DQo");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DQo=" + "'", str51, "DQo=");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "/woK" + "'", str60, "/woK");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[65, 81, 111, 75, 47, 47, 56, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
    }

    @Test
    public void test666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test666");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64(10, byteArray18);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false);
        boolean boolean27 = base64_19.isInAlphabet(byteArray25, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        java.lang.String str32 = base64_10.encodeAsString(byteArray25);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64(10, byteArray40);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false);
        boolean boolean49 = base64_41.isInAlphabet(byteArray47, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray52 = base64_41.decode(byteArray51);
        java.lang.String str53 = base64_10.encodeAsString(byteArray52);
        java.lang.String str54 = base64_1.encodeAsString(byteArray52);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray52);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str32, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
    }

    @Test
    public void test667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test667");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setLineLength(0);
        org.apache.commons.codec.binary.Base64 base64_5 = builder2.get();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(base64_5);
    }

    @Test
    public void test668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test668");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, false);
        byte[] byteArray28 = base64_0.encode(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        java.lang.Object obj39 = base64_0.decode((java.lang.Object) byteArray38);
        boolean boolean40 = base64_0.isUrlSafe();
        byte[] byteArray41 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long42 = base64_0.getEncodedLength(byteArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"pArray\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test669");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, false);
        byte[] byteArray28 = base64_0.encode(byteArray22);
        boolean boolean29 = base64_0.isStrictDecoding();
        byte[] byteArray31 = base64_0.decode("UkZGdlBRPT0");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[82, 70, 70, 118, 80, 81, 61, 61]");
    }

    @Test
    public void test670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test670");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("L3dvSw==\001\n\n\ufffd\ufffd\n");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[76, 51, 100, 118, 83, 119]");
    }

    @Test
    public void test671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test671");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, true);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
    }

    @Test
    public void test672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test672");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = base64_13.encodeToString(byteArray20);
        byte[] byteArray22 = base64_8.encode(byteArray20);
        boolean boolean23 = base64_8.isUrlSafe();
        boolean boolean25 = base64_8.isInAlphabet("TDNkdlN3RUtDdi8vQ2c9PQ0K");
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64(10, byteArray34);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false);
        boolean boolean43 = base64_35.isInAlphabet(byteArray41, true);
        byte[] byteArray45 = base64_35.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((-1), byteArray45);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray54);
        java.lang.String str56 = base64_48.encodeToString(byteArray55);
        java.lang.String str57 = base64_47.encodeAsString(byteArray55);
        byte[] byteArray58 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray58);
        java.lang.String str60 = base64_47.encodeToString(byteArray58);
        byte[] byteArray63 = base64_46.encode(byteArray58, (int) (short) 100, 0);
        boolean boolean64 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray63);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray63);
        java.lang.String str66 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray65);
        java.lang.String str67 = base64_8.encodeAsString(byteArray65);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "/woK" + "'", str56, "/woK");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "/woK" + "'", str57, "/woK");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "DQo" + "'", str59, "DQo");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "DQo=" + "'", str60, "DQo=");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
    }

    @Test
    public void test673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test673");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_7 = builder2.get();
        byte[] byteArray9 = base64_7.decode("L3dvSw==");
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "L3dvSw" + "'", str11, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 119, 111, 75, 13, 10]");
    }

    @Test
    public void test674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test674");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder2.setUrlSafe(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray28 = base64_17.decode(byteArray27);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        org.apache.commons.codec.binary.Base64.Builder builder32 = builder2.setEncodeTable(byteArray27);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64(10, byteArray41);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false);
        boolean boolean50 = base64_42.isInAlphabet(byteArray48, true);
        byte[] byteArray52 = base64_42.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((-1), byteArray52);
        org.apache.commons.codec.binary.Base64.Builder builder54 = builder2.setLineSeparator(byteArray52);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64(10, byteArray62);
        byte[] byteArray64 = null;
        byte[] byteArray67 = base64_63.encode(byteArray64, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray75);
        java.lang.String str77 = base64_69.encodeToString(byteArray76);
        java.lang.String str78 = base64_68.encodeAsString(byteArray76);
        byte[] byteArray79 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str80 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray79);
        java.lang.String str81 = base64_68.encodeToString(byteArray79);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray86 = base64_68.encode(byteArray83, 1, 0);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86, false, true);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray86);
        java.lang.String str91 = base64_63.encodeToString(byteArray86);
        java.math.BigInteger bigInteger92 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray86);
        org.apache.commons.codec.binary.Base64.Builder builder93 = builder2.setLineSeparator(byteArray86);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[13, 10]");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "/woK" + "'", str77, "/woK");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "/woK" + "'", str78, "/woK");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "DQo" + "'", str80, "DQo");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "DQo=" + "'", str81, "DQo=");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(bigInteger92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test675");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        java.lang.String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        byte[] byteArray14 = base64_1.decode(byteArray12);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        java.lang.String str24 = base64_16.encodeToString(byteArray23);
        java.lang.String str25 = base64_15.encodeAsString(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        java.lang.String str28 = base64_15.encodeToString(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray33 = base64_15.encode(byteArray30, 1, 0);
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray33);
        java.lang.String str35 = base64_1.encodeToString(byteArray33);
        org.apache.commons.codec.binary.Base64.Builder builder36 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy37 = null;
        org.apache.commons.codec.binary.Base64.Builder builder38 = builder36.setDecodingPolicy(codecPolicy37);
        org.apache.commons.codec.binary.Base64.Builder builder40 = builder38.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy41 = null;
        org.apache.commons.codec.binary.Base64.Builder builder42 = builder38.setDecodingPolicy(codecPolicy41);
        org.apache.commons.codec.CodecPolicy codecPolicy43 = null;
        org.apache.commons.codec.binary.Base64.Builder builder44 = builder38.setDecodingPolicy(codecPolicy43);
        org.apache.commons.codec.binary.Base64.Builder builder46 = builder44.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray54);
        java.lang.String str56 = base64_48.encodeToString(byteArray55);
        java.lang.String str57 = base64_47.encodeAsString(byteArray55);
        byte[] byteArray58 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        byte[] byteArray60 = base64_47.decode(byteArray58);
        org.apache.commons.codec.binary.Base64.Builder builder61 = builder44.setEncodeTable(byteArray58);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, true, true);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false, true);
        java.lang.String str68 = base64_1.encodeAsString(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_70 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray58, false);
        java.lang.String str71 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray58);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "/woK" + "'", str24, "/woK");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "/woK" + "'", str25, "/woK");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DQo" + "'", str27, "DQo");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DQo=" + "'", str28, "DQo=");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "/woK" + "'", str56, "/woK");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "/woK" + "'", str57, "/woK");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[68, 81, 111]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DQo=" + "'", str68, "DQo=");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "DQo=" + "'", str71, "DQo=");
    }

    @Test
    public void test676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test676");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isBase64(byteArray18);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test677");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, true);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray23);
        java.lang.String str30 = base64_8.encodeAsString(byteArray23);
        org.apache.commons.codec.CodecPolicy codecPolicy31 = base64_8.getCodecPolicy();
        boolean boolean32 = base64_8.isUrlSafe();
        boolean boolean33 = base64_8.isStrictDecoding();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str30, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + codecPolicy31 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy31.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test678");
        org.apache.commons.codec.binary.Base64.Builder builder1 = org.apache.commons.codec.binary.Base64.builder();
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, true, (int) '#');
        org.apache.commons.codec.binary.Base64.Builder builder8 = builder1.setLineSeparator(byteArray7);
        org.apache.commons.codec.binary.Base64.Builder builder9 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy10 = null;
        org.apache.commons.codec.binary.Base64.Builder builder11 = builder9.setDecodingPolicy(codecPolicy10);
        org.apache.commons.codec.binary.Base64.Builder builder13 = builder11.setPadding((byte) 1);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64(10, byteArray21);
        byte[] byteArray23 = null;
        byte[] byteArray26 = base64_22.encode(byteArray23, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray33);
        java.lang.String str35 = base64_27.encodeToString(byteArray34);
        byte[] byteArray36 = base64_22.encode(byteArray34);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        org.apache.commons.codec.binary.Base64.Builder builder38 = builder13.setLineSeparator(byteArray37);
        org.apache.commons.codec.binary.Base64.Builder builder39 = builder1.setEncodeTable(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray37, false);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray37);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/woK" + "'", str35, "/woK");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
    }

    @Test
    public void test679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test679");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_7 = builder2.get();
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64("AQoK//8K");
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder2.setEncodeTable(byteArray9);
        org.apache.commons.codec.binary.Base64.Builder builder12 = builder10.setUrlSafe(true);
        org.apache.commons.codec.binary.Base64.Builder builder13 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy14 = null;
        org.apache.commons.codec.binary.Base64.Builder builder15 = builder13.setDecodingPolicy(codecPolicy14);
        org.apache.commons.codec.binary.Base64.Builder builder17 = builder15.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy18 = null;
        org.apache.commons.codec.binary.Base64.Builder builder19 = builder15.setDecodingPolicy(codecPolicy18);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64(10, byteArray27);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64(10, byteArray36);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false);
        boolean boolean45 = base64_37.isInAlphabet(byteArray43, true);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, true);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray43);
        java.lang.String str50 = base64_28.encodeAsString(byteArray43);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = base64_28.getCodecPolicy();
        org.apache.commons.codec.binary.Base64.Builder builder52 = builder15.setDecodingPolicy(codecPolicy51);
        org.apache.commons.codec.binary.Base64.Builder builder53 = builder10.setDecodingPolicy(codecPolicy51);
        org.apache.commons.codec.binary.Base64 base64_54 = builder53.get();
        org.apache.commons.codec.binary.Base64.Builder builder56 = builder53.setLineLength((int) (byte) 10);
        org.apache.commons.codec.binary.Base64.Builder builder58 = builder56.setLineLength((int) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str50, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + codecPolicy51 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy51.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(base64_54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test680");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean12 = base64_0.isInAlphabet("AQoK//8K");
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(10, byteArray20);
        byte[] byteArray22 = null;
        byte[] byteArray25 = base64_21.encode(byteArray22, 100, 76);
        boolean boolean26 = base64_21.isStrictDecoding();
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) '#');
        long long34 = base64_27.getEncodedLength(byteArray29);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64(10, byteArray42);
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false);
        boolean boolean51 = base64_43.isInAlphabet(byteArray49, true);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, true, false);
        byte[] byteArray55 = base64_27.encode(byteArray49);
        java.lang.String str56 = base64_21.encodeToString(byteArray55);
        org.apache.commons.codec.binary.Base64.Builder builder57 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy58 = null;
        org.apache.commons.codec.binary.Base64.Builder builder59 = builder57.setDecodingPolicy(codecPolicy58);
        org.apache.commons.codec.binary.Base64.Builder builder61 = builder59.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy62 = null;
        org.apache.commons.codec.binary.Base64.Builder builder63 = builder59.setDecodingPolicy(codecPolicy62);
        org.apache.commons.codec.CodecPolicy codecPolicy64 = null;
        org.apache.commons.codec.binary.Base64.Builder builder65 = builder59.setDecodingPolicy(codecPolicy64);
        org.apache.commons.codec.binary.Base64.Builder builder67 = builder65.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray75);
        java.lang.String str77 = base64_69.encodeToString(byteArray76);
        java.lang.String str78 = base64_68.encodeAsString(byteArray76);
        byte[] byteArray79 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray79);
        byte[] byteArray81 = base64_68.decode(byteArray79);
        org.apache.commons.codec.binary.Base64.Builder builder82 = builder65.setEncodeTable(byteArray79);
        boolean boolean84 = base64_21.isInAlphabet(byteArray79, false);
        byte[] byteArray85 = base64_0.encode(byteArray79);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85, false, false, (int) 'a');
        java.lang.String str90 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray85);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str56, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "/woK" + "'", str77, "/woK");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "/woK" + "'", str78, "/woK");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[82, 70, 70, 118, 80, 81, 61, 61]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "RFFvPQ" + "'", str90, "RFFvPQ");
    }

    @Test
    public void test681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test681");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, true, true, (int) '#');
        long long21 = base64_14.getEncodedLength(byteArray16);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true, false);
        byte[] byteArray42 = base64_14.encode(byteArray36);
        java.lang.String str43 = base64_8.encodeToString(byteArray42);
        org.apache.commons.codec.binary.Base64.Builder builder44 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy45 = null;
        org.apache.commons.codec.binary.Base64.Builder builder46 = builder44.setDecodingPolicy(codecPolicy45);
        org.apache.commons.codec.binary.Base64.Builder builder48 = builder46.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy49 = null;
        org.apache.commons.codec.binary.Base64.Builder builder50 = builder46.setDecodingPolicy(codecPolicy49);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = null;
        org.apache.commons.codec.binary.Base64.Builder builder52 = builder46.setDecodingPolicy(codecPolicy51);
        org.apache.commons.codec.binary.Base64.Builder builder54 = builder52.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray62);
        java.lang.String str64 = base64_56.encodeToString(byteArray63);
        java.lang.String str65 = base64_55.encodeAsString(byteArray63);
        byte[] byteArray66 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray68 = base64_55.decode(byteArray66);
        org.apache.commons.codec.binary.Base64.Builder builder69 = builder52.setEncodeTable(byteArray66);
        boolean boolean71 = base64_8.isInAlphabet(byteArray66, false);
        boolean boolean72 = base64_8.isUrlSafe();
        org.apache.commons.codec.CodecPolicy codecPolicy73 = base64_8.getCodecPolicy();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_82 = new org.apache.commons.codec.binary.Base64(10, byteArray81);
        byte[] byteArray86 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86, false);
        boolean boolean90 = base64_82.isInAlphabet(byteArray88, true);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray88, true);
        boolean boolean93 = org.apache.commons.codec.binary.Base64.isBase64(byteArray88);
        java.lang.String str94 = base64_8.encodeToString(byteArray88);
        byte[] byteArray97 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray88, false, false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str43, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "/woK" + "'", str64, "/woK");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "/woK" + "'", str65, "/woK");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy73 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy73.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str94, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[76, 51, 100, 118, 83, 119, 61, 61]");
    }

    @Test
    public void test682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test682");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray28);
        java.lang.String str30 = base64_22.encodeToString(byteArray29);
        java.lang.String str31 = base64_21.encodeAsString(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        java.lang.String str34 = base64_21.encodeToString(byteArray32);
        byte[] byteArray37 = base64_20.encode(byteArray32, (int) (short) 100, 0);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray39);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/woK" + "'", str31, "/woK");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DQo" + "'", str33, "DQo");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DQo=" + "'", str34, "DQo=");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
    }

    @Test
    public void test683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test683");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64(10, byteArray18);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false);
        boolean boolean27 = base64_19.isInAlphabet(byteArray25, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray25);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray36 = base64_0.encode(byteArray34);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        java.math.BigInteger bigInteger38 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
    }

    @Test
    public void test684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test684");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str29 = base64_21.encodeToString(byteArray28);
        java.lang.String str30 = base64_20.encodeAsString(byteArray28);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray38);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false);
        boolean boolean47 = base64_39.isInAlphabet(byteArray45, true);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray45);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, false);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = base64_20.encode(byteArray54);
        java.lang.Object obj57 = base64_8.encode((java.lang.Object) byteArray56);
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray56);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger58);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray59);
        java.lang.Class<?> wildcardClass61 = byteArray59.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/woK" + "'", str29, "/woK");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[86, 69, 82, 79, 97, 50, 82, 115, 84, 106, 78, 81, 86, 68, 66, 79, 81, 50, 99, 57, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test685");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        byte[] byteArray19 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray19);
        boolean boolean23 = base64_8.isInAlphabet(byteArray21, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        java.lang.String str27 = base64_8.encodeAsString(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo" + "'", str20, "DQo");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo" + "'", str25, "DQo");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str27, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RFFvPQ" + "'", str28, "RFFvPQ");
    }

    @Test
    public void test686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test686");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(0);
        boolean boolean2 = base64_1.isStrictDecoding();
        org.apache.commons.codec.binary.Base64.Builder builder3 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy4 = null;
        org.apache.commons.codec.binary.Base64.Builder builder5 = builder3.setDecodingPolicy(codecPolicy4);
        org.apache.commons.codec.binary.Base64.Builder builder7 = builder5.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder9 = builder5.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_10 = builder5.get();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = base64_1.decode((java.lang.Object) builder5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(base64_10);
    }

    @Test
    public void test687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test687");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray18 = base64_0.encode(byteArray15, 1, 0);
        boolean boolean19 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray15);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test688");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        byte[] byteArray2 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        byte[] byteArray5 = base64_1.encode(byteArray4);
        org.apache.commons.codec.CodecPolicy codecPolicy6 = base64_1.getCodecPolicy();
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64("\ufffd\n\n");
        byte[] byteArray11 = base64_1.encode(byteArray8, (int) (short) 1, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DQo" + "'", str3, "DQo");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + codecPolicy6 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy6.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[67, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test689");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("DQo");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, true, true, (int) '#');
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isBase64(byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test690");
        org.apache.commons.codec.binary.Base64.Builder builder0 = org.apache.commons.codec.binary.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.Base64 base64_7 = builder2.get();
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64("AQoK//8K");
        org.apache.commons.codec.binary.Base64.Builder builder10 = builder2.setEncodeTable(byteArray9);
        org.apache.commons.codec.binary.Base64.Builder builder12 = builder10.setUrlSafe(true);
        org.apache.commons.codec.binary.Base64 base64_13 = builder12.get();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64(10, byteArray21);
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false);
        boolean boolean30 = base64_22.isInAlphabet(byteArray28, true);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray33 = base64_22.decode(byteArray32);
        boolean boolean35 = base64_22.isInAlphabet("");
        boolean boolean36 = base64_22.isStrictDecoding();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64(10, byteArray44);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false);
        boolean boolean53 = base64_45.isInAlphabet(byteArray51, true);
        byte[] byteArray55 = base64_45.decode("/woK");
        byte[] byteArray56 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        java.lang.String str57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray56);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray56);
        boolean boolean60 = base64_45.isInAlphabet(byteArray58, true);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64(10, byteArray68);
        byte[] byteArray70 = null;
        byte[] byteArray73 = base64_69.encode(byteArray70, 100, 76);
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray78 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78, false);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray80);
        java.lang.String str82 = base64_74.encodeToString(byteArray81);
        byte[] byteArray83 = base64_69.encode(byteArray81);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray83);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray83);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray83, false, true, 76);
        byte[] byteArray90 = base64_45.encode(byteArray89);
        long long91 = base64_22.getEncodedLength(byteArray90);
        byte[] byteArray92 = base64_13.decode(byteArray90);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray90, false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(base64_13);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DQo" + "'", str57, "DQo");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray73);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "/woK" + "'", str82, "/woK");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[76, 51, 100, 118, 83, 119, 69, 75, 67, 118, 47, 47, 67, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[76, 51, 100, 118, 83, 119, 69, 75, 67, 118, 95, 95, 67, 103]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[84, 68, 78, 107, 100, 108, 78, 51, 1, 10, 10, -1, -1, 10, 82, 85, 116, 68, 100, 108, 57, 102, 1, 10, 10, -1, -1, 10, 81, 50, 99, 61, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 94L + "'", long91 == 94L);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[76, 51, 100, 118, 83, 119, 69, 75, 67, 118, 95, 95, 67, 103]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[86, 69, 82, 79, 97, 50, 82, 115, 84, 106, 77, 66, 67, 103, 114, 47, 47, 119, 112, 83, 86, 88, 82, 69, 90, 71, 119, 53, 90, 103, 69, 75, 67, 118, 47, 47, 67, 108, 69, 121, 89, 122, 48, 66, 67, 103, 114, 47, 47, 119, 111, 61]");
    }
}
